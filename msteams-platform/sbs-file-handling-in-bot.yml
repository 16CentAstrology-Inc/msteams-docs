### YamlMime:Tutorial
title: Teams file upload bot
metadata:
  title: Teams File Upload Bot 
  description: In this tutorial, you'll learn how to upload files to Teams from a bot and how to receive a file sent to a bot as an attachment.
  audience: Developer
  level: Beginner
  ms.date: 28/12/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/bots-filesv4.md
  nextTutorialTitle: Read more on send and receive files through the bot
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
   The bot is created using Bot Framework. It shows how to upload files to Teams from a bot and how to receive a file sent to a bot as an attachment. 
   It also shows how to fetch inline images sent in message.
    
   This step-by-step guide helps you to upload files from a bot to Microsoft Teams. You'll see the following output:

   :::image type="content" source="assets/images/teams-file-upload-bot/output-sbs.png" alt-text="sbs output" lightbox="assets/images/teams-file-upload-bot/output-sbs.png":::
   
- title: Prerequisites
  durationInMinutes: 1 
  content: |
    Ensure you install the following tools and set up your development environment: 

    * [Microsoft Teams](https://teams.microsoft.com/) with valid account
    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)
    * [.NET Core SDK version 3.1](https://dotnet.microsoft.com/download).
    * [Latest version of ngrok](https://ngrok.com/download) (only for devbox testing) or any equivalent tunneling solution
   
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

- title: Set up local environment
  durationInMinutes: 1
  content: |  

    1. Open [BotBuilder-Samples](https://github.com/Microsoft/BotBuilder-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/botbuilder-sample.png" alt-text="cloning the repository" border="false":::

    1. Select **Clone**. 

- title: Create and register your bot in Azure AD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Microsoft Azure Active Directory (Azure AD), create a tunnel using ngrok, and add messaging endpoint, perform the following steps:
    
    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource:**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure bot**.
    1. Select the **Enter**.
    1. Select **Azure Bot**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/azure-new.png" alt-text="azure bot card" border="false":::
       
    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select **msteams.nonprod.pub.msft.aplt**.
    1. From the **Resource group** dropdown list, select your existing resource group.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/selection-of-resource.png" alt-text="azure resource selection" border="false":::
       
         You can also create a new resource group (select **Create new** > enter resource name > select **OK**)

     1. If you have created a new resource group, select the required location from **New resource group location** dropdown list.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/newresource.png" alt-text="selection of new resource location" border="false":::

     1. Select **Type of App** as `Multi Tenant`.

     1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
        You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

        > [!NOTE]
        > You can't create more than one bot with the same **Microsoft App ID**.

     1. Select **Review + create**.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/review-create.png" alt-text="creation of new bot" border="false":::   

     1. If the validation passes, select **Create**. 
    
        It takes a few moments for your bot service to be provisioned.

     1. Select **Go to resource**. 

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/deployment.png" alt-text="create resource" border="false":::

        Your Azure bot is created.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/azure-bot-created.png" alt-text="creation of bot" border="false":::

     **To create client secret**

     Perform the following steps if you have created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**.

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/manage.png" alt-text="select manage" border="false":::

    1. In the **Client secrets** section, select **New client secret**.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/new-client-secret.png" alt-text="adding client secret" border="false":::

       The **Add a client secret** window appears. 

    1. Enter **Description**.

    1. Select **Add**.
    
        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-client-secret.png" alt-text="adding client secret and description" border="false"::: 

    1. In the **Value** column, select **Copy to clipboard**.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/copy-value.png" alt-text="copy value to clipboard" border="false":::

        > [!TIP]
        > Save the **Client secrets** value or app password for future reference. 
       
     **To add the Teams channel:**

    1. Select **Home**.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/go-to-home.png" alt-text="select home" border="false":::    

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane.

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

    1. Select the checkbox to accept the **Terms of Service**.

    1. Select **Agree**.
   
        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/terms.png" alt-text="select terms" border="false":::

    1. Select **Apply**.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/apply-teams.png" alt-text="microsoft teams" border="false":::

    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=localhost 3978
     ```

    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command.

    **To add messaging endpoint:**

    1. From ngrok, copy the HTTPS URL.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/ngrok.png" alt-text="apply ngrok" border="false"::: 

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that does not include `https://` in it.

    1.  In **Settings** for the Azure bot that you created, select **Configuration**.

    1.  In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-api.png" alt-text="adding api" border="false":::
        
     1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.
   
- title: Update the Azure AD app registration
  durationInMinutes: 5
  content: |
    1. Go to the [Microsoft Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.
       
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/select-your-bot.png" alt-text="bot selection" border="false":::

- title: Test your app
  durationInMinutes: 2
  content: |
    The most comprehensive way to test your app is by creating an app package and uploading it to Teams. This method is the only way to test the full functionality available to your app,
    across all scopes. You can configure and run the Teams app by uploading the `manifest.zip` file.

    To execute the Teams file bot, upload the `manifest.zip` file in Teams. Perform the following steps:

    1. In the **File Explorer**, go to **botbuilder-samples** > **samples** > **csharp_dotnetcore** > **56.teams-file-upload** > **appsettings**.

    1. Open the appsettings in Visual Studio Code and update the `appsettings.json` configuration file for the bot to use the `MicrosoftAppId (Bot Id)`, `MicrosoftAppPassword(Value of the client secret ID)`, `MicrosoftAppType`, and `MicrosoftAppTenantID`.

       ![app settings](~/assets/images/teams-file-upload-bot/app-settings.png)

    1. Open the `manifest.json` file in Visual Studio Code.

    1. In the `manifest.json` file, locate `YOUR-MICROSOFT-APP-ID` and replace it with your App Id. Your App ID is created when you register your bot. Save the file.

       ![manifest json](~/assets/images/teams-file-upload-bot/manifest-json.png)

    1. Zip up the contents of the `TeamsAppManifest' folder to create a `manifest.zip` archive. Open the manifest file in Visual Studio Code and replace with your MicrosoftAppID (depending on the scenario the Microsoft App Id may occur multiple times in the `manifest.json` file.)

    1. Upload the `manifest.zip` to Teams (in the Apps view click "Upload a custom app")

    1. To upload `manifest.zip`, select **Store** > **Manage your apps** > **Upload a custom app** and open `manifest.zip`.

    1. Select **Add** to add the bot to your chat.

    1. Before sending a message to the bot, go to **File Explorer**, navigate to **botbuilder-samples** > **samples** > **csharp_dotnetcore** > **56.teams-file-upload**

    1. Open `TeamsFileUpload.csproj` file in Visual Studio Code and ensure you are in 'Teams file upload'

        ![Visual code](~/assets/images/teams-file-upload-bot/visual-studio-teams-file-upload-bot.png)

    1. Run your bot, from Visual Studio with `F5` or using `dotnet run` in the appropriate folder

    1. Send a message `Hi` to the bot and wait for few seconds for it to respond with a card.

- title: Interacting with the bot in Teams
  durationInMinutes: 2
  content: |
    > [!NOTE]
    >  After the bot is installed in the personal scope, the user enters into a one on one chat conversation with the bot.

    This guide shows how to communicate with the bot in various ways. Following are the steps that demonstrates the bot activities:

    1. Send a message to the bot. It responds with a card for the permission to upload the file.
       
         ![prompt1](~/assets/images/teams-file-upload-bot/sbs-1.png)

    1. Select **Allow**. A `teams-logo.png` file is uploaded to the file directory, which is ready to download.

         ![message prompt](~/assets/images/teams-file-upload-bot/sbs-2.png)

    1. Send a file to the bot as an attachment in Teams. It responds with a message `Received and Saved`. You can view the attachment from the **Files** tab.

         ![file prompt](~/assets/images/teams-file-upload-bot/sbs-3.png)

    1. Send an image as an attachment. It responds with a message `Received and saved`. You can view the image on the chat window and from **Files** tab.
       
         ![Image prompt](~/assets/images/teams-file-upload-bot/sbs-4.png)
    
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?
    
    :::image type="content" source="assets/images/teams-file-upload-bot/output-sbs.png" alt-text="Expected output from the guide that confirms you can upload files from bot to Teams." lightbox="assets/images/teams-file-upload-bot/output-sbs.png":::

- content: |
    You have completed the tutorial. Now you can upload files from bot to Microsoft Teams.

 