### YamlMime:Tutorial
title: Tab Device Permission Demo
metadata:
  title: Tab Device Permission Demo
  description: In this tutorial, you'll learn to give tab device permission for Microsoft Teams sample apps.
  audience: Developer
  level: Beginner
  ms.date: 12/06/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Teams app that require device permissions, such as camera or microphone access, now require users to manually grant permission at a per app level in the web browser. Previously, the browser handled how to grant access permissions, but now these permissions are handled in Microsoft Teams.

    This step-by-step guide helps you to give tab device permission demo. You'll see the following output:

    ![Mobile signed in to tab device permission](~/assets/images/tab-device-permission/sbs-tab-device-permission-browser-mobile-get-location.png)


- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  

    * Microsoft Teams with an account (not a guest account)
    * [ngrok](https://ngrok.com/) or equivalent tunneling solution
    * Visual Studio 2019 or the latest version
    * [Microsoft 365 developer account](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) or access to Teams account with the appropriate permissions to install an app

- title: Configure and run the Tab Device Permissin app on Teams
  durationInMinutes: 1
  content: |
    Configure the tab device permission sample in Microsoft Teams.

    **To configure and run your tab device permission sample**

    1. Open Git Bash and clone a repository **git clone https://github.com/OfficeDev/Microsoft-Teams-Samples.git**. Ensure that you note the **Path** where the repository is cloned.
    1. In the Windows Explorer, go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs** folder.
    1. Open ngrok, run the below command.

    ```bash
    npm install
    ```
    1. Run the application in the ngrok using following command
       
    ```bash
    npm start
    ```
    1. Begin your tunnelling service to get an https endpoint.
    1. Go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs**.
    1. Start an ngrok tunnel with the following command (you'll need the https endpoint to update the manifest file):
       
        ```bash
    ngrok http 3000 --host-header=localhost
    ```

    **To run the tab device permission by uploading the manifest.zip file in Teams**

    1. Create an app manifest.
    1. In the Windows Explorer, go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs > appPackage** folder.
    1. Open the **manifest.json** file.
    1. In the **manifest.json** file, find **<<BASE_URI_DOMAIN>>** and replace it with your https endpoint from ngrok excluding the "https://" part.
    1. Zip the files in the **appPackage/folder** to create manifest.zip.
    1. Go to Teams.
    1. To upload **manifest.zip**, select **Apps > Upload a custom app and open manifest.zip**.
    1. Select **Add** to add the tab device permission to your Teams.
    (Image will be added here)
    1. Open **Tab Device Permission** and select **Device Permission Tab**.
    1. Select **Get Location**.
    
    
- title: Configure and run the Teams app
  durationInMinutes: 2
  content: |
    The most comprehensive way to test your bot is by creating an app package and uploading it to Teams. This method is the only way to test the full functionality available to your bot, across all scopes. You can configure and run the Teams app by uploading the **manifest.zip** file.

    **To run the Teams app by uploading the manifest.zip file**
    
    1. In Visual Studio, go to the **appPackage/** folder.
    1. Open the **manifest.json** file.
    1. In the **manifest.json** file, find **{TODO: MicrosoftAppId}** and replace it with your Microsoft App ID.
    1. In Windows Explorer, go to the **Microsoft-Teams-Samples > samples > bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage** folder.
    1. Zip the contents of the **appPackage/** folder to create **manifest.zip**.
    1. Go to Teams.
    1. To upload **manifest.zip**, select **Store > Manage your apps > Upload a custom app** and open **manifest.zip**.
    1. Select **Add** to add the conversation bot to your chat.

        You can interact with this bot by sending it a message. The Bot exchanges an SSO token and makes a call to the Graph API on your behalf and returns the results. It keeps you signed in unless you send a message to **logout**.

    1. Send a message to the bot. The conversation bot asks for permissions for the first time.

        ![Permissions to bot](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

    1. Select **Continue** to accept the permissions.

    1. Select **Accept** for **Permissions requested**.

        ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

    (Image will be added here)
    
- content: |
    You've completed the tutorial to give tab device permission for Microsoft Teams sample apps.

