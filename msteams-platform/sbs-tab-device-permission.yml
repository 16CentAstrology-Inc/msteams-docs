### YamlMime:Tutorial
title: Tab device permission demo
metadata:
  title: Tab device permission demo
  description: In this tutorial, you'll learn to give tab device permission for Microsoft Teams sample apps.
  audience: Developer
  level: Beginner
  ms.date: 12/10/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Teams app that requires device permissions, such as location, camera, or microphone access, now require users to manually grant permission at per app level in the web browser. Previously, the browser handled how to grant access permissions, but now these permissions are handled in Microsoft Teams.

    This step-by-step guide helps you to do tab device permission demo at Microsoft Teams. You'll see the following output:

      ![desktop3](~/assets/images/tab-device-permission/sbs-tab-device-permission-location.PNG)


- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  

    * Microsoft Teams with an account (not a guest account)
    * [ngrok](https://ngrok.com/) or equivalent tunneling solution
    * Visual Studio 2019 or the latest version
    * [Microsoft 365 developer account](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) or access to Teams account with the appropriate permissions to install an app

- title: Configure and run the Tab device permission app on Teams
  durationInMinutes: 1
  content: |
    The most comprehensive way to test your app is by creating an app package and uploading it to Teams. This method is the only way to test the full functionality available to your app, across all scopes. You can configure and run the Teams app by uploading the manifest.zip file.

    **To configure and run your tab device permission app:**

    1. Open **command prompt** and clone a repository **git clone https://github.com/OfficeDev/Microsoft-Teams-Samples.git**. Ensure that you note the **Path** where the repository is cloned.
    2. In the **Windows Explorer**, go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs** folder and copy the folder location.
    3. In the **command prompt**, enter **cd location (node js folder location)** and run this command.
    4. Run the following command in the **command prompt**:
    
       ```command-prompt
        npm install
        ```
    5. Run the application in the **command prompt** using following command:
    
       ```command-prompt
       npm start
       ```

    **Begin your tunneling service to get an https endpoint:**

    1. Go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs**.
    2. Open **ngrok** terminal and start a ngrok tunnel with the following command (you'll need the https endpoint to update the manifest file):

       ```ngrok
       ngrok http 3000 --host-header=localhost
       ```  
        
    **To run the tab device permission by uploading the manifest.zip file in Teams:**

    1. In the **Windows Explorer**, go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs > appPackage** folder.
    2. Open the **manifest.json** file in visual studio code.
    3. In the **manifest.json** file, find **<<BASE_URI_DOMAIN>>** and replace it with your https endpoint from ngrok excluding the "https://" part in all the places.

       ![ngrok](~/assets/images/tab-device-permission/ngrok-tunnel.PNG)

    4. Zip the files in the **appPackage/folder** as manifest.zip.
    5. Go to Teams.
    6. To upload **manifest.zip**, select **Apps > Upload a custom app** and open **manifest.zip**.
    7. Select **Tab Device Permission** app.
    8. Select **Add** to add the tab device permission app.

       ![addbrowserteams](~/assets/images/tab-device-permission/sbs-add-browser-teams.png)

    9. Open **Tab Device Permission** and select **Device Permission Tab** to see the following output:

        ![desktopteams](~/assets/images/tab-device-permission/dekstop-tab-device-permission.png)

    10. Open mobile Teams to see the following outputs:

        ![mobileteams](~/assets/images/tab-device-permission/mobile-teams-output.png)

    11. Open desktop Teams to see the following output:  

        ![desktopteams](~/assets/images/tab-device-permission/dekstop-tab-device-permission.png)

- title: Test your app
  durationInMinutes: 1
  content: |
    To ensure that the tab device permission sample app enables user to give the permission, you must test the app after you uploaded the app into the Teams successfully. To test the tab device permission sample app, do the following steps:

     # [Desktop](#tab/Desktop)

      Select **App Permission icon** to see the following outputs:

       ![desktoppermissionteams](~/assets/images\tab-device-permission\desktop-teams-permission.png)

      # [Browser](#tab/Browser)

      Select **Get Location** to see the following outputs:

       ![locationresultbrowserteams](~/assets/images/tab-device-permission/sbs-location-result.png)

     # [Mobile](#tab/Mobile)

      Select the respective button to test the scenario and get the following prompts to accept permission request:

       ![mobileappteams](~/assets/images/tab-device-permission/prompt-mobile-app.png)

    --- 
    
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

      ![tabdeviceimage](~/assets/images/tab-device-permission/sbs-tab-device-permission-location.PNG)


- content: |
    You've completed the tutorial to do tab device permission demo at Microsoft Teams apps.

