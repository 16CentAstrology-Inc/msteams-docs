### YamlMime:Tutorial
title: Build command bot using JavaScript
metadata:
  title: Build command bot with JavaScript
  description: In this tutorial, you'll learn to create command bot with JavaScript.
  audience: Developer
  level: Beginner
  ms.date: 05/05/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Back to Get started overview
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Microsoft Teams allows you to automate simple and repetitive tasks right inside a conversation. You can build a Teams bot that can respond to simple commands sent in chats with adaptive cards. 

    In this tutorial, you'll learn:

    - How to create a command bot with Teams Toolkit
    - About the directory structure of your app
    
    This step-by-step guide helps you to build command bot with Teams Toolkit. You'll see the following output:

      :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="final-output" border="true":::

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Here's a list of tools you'll need for building and deploying your apps.

   | &nbsp; | Install | For using... |
   | --- | --- | --- |
   | **Required** | &nbsp; | &nbsp; |
   | &nbsp; | [Teams Toolkit](#install-the-teams-toolkit) | A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use version 3.8.1. |
   | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call - all in one place.|
   | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. Use the latest version.|
   | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript, or SharePoint Framework (SPFx) build environments. Use latest version. |
   | &nbsp; | [Microsoft 365 developer account](https://docs.microsoft.com/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
   
   ## Prepare development environment

   After you've installed the required tools, set up the development environment.


   ### Install the Teams Toolkit

   The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Teams store, and more. 
    
   You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.


   # [Visual Studio Code](#tab/vscode)

   1. Open Visual Studio Code and select the **Extensions** view (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).
   1. In the search box, enter **Teams Toolkit**.
   1. Select **Install** next to the Teams Toolkit.

    :::image type="content" source="~/assets/images/sbs-command-bot/teams-toolkit.png" alt-text="Illustration shows the Teams Toolkit extension installation." border="false":::

    The Teams Toolkit icon appears in the Visual Studio Code sidebar after it's installed.

    :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png" alt-text="Illustration shows the Teams Toolkit icon in Visual Studio Code sidebar." border="false":::

   You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

   # [Command line](#tab/cli)

   To install the TeamsFx CLI, use the `npm` package manager:

   ``` bash
   npm install -g @microsoft/teamsfx-cli
   ```

   Depending on your configuration, you may need to use `sudo` to install the CLI:

   ``` bash
   sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
   ```

   This condition is more common on Linux and macOS systems.

   Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  

   You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

   > [!CAUTION]
   > Before you can run TeamsFx in PowerShell terminals, you must enable the "remote signed" execution policy for PowerShell.

   ---

   ## Set up your Teams development tenant

   A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where your sideload and test your app. Let's verify if you're ready to develop with the tenant.

   ### Check for sideloading option

   After creating the app, you must load your app in Teams without distributing it. This process is known as sideloading. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Sideloading is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you won't be able to preview and test your app in Teams locally.

   Do you already have a tenant, and do you have the admin access? Let's check if you really do!

   Verify if you can sideload apps in Teams:

    1. In the Teams client, select the **Store** icon.
    1. Select **Manage your apps**.
    1. Select **Publish an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > If you don't have the option to upload a custom app, talk to your Teams administrator.

   ### Create a free Teams developer tenant (optional)

   If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

   1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
   1. Select **Join Now** and follow the onscreen instructions.
   1. In the welcome screen, select **Set up E5 subscription**.
   1. Set up your administrator account. After you finish, the following screen appears.

       :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Microsoft" border="true":::

   1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

- title: Build command response bot
  durationInMinutes: 1
  content: |
    # [Visual Studio Code](#tab/vsc)

    1. Open Visual Studio Code.

    1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code sidebar.

    1. Select **Create a new Teams app**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/create-new-teams-app.png" alt-text="Location of the Create New Project link in the Teams Toolkit sidebar." border="true":::

    1. Select **Create a new Teams app** to create an app using Teams Toolkit.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/create-new-app.png" alt-text="Wizard starts for creating a new project" border="true":::

    1. Ensure that **Command bot** is selected as the capability that you want to build in your app.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-bot.png" alt-text="Select App Capability" border="true":::

    1. Select **JavaScript** as the programming language.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-script.png" alt-text="Screenshot showing how to select the programming language." border="true":::

    1. Select **HTTP Trigger** as the trigger. Select **OK**.

         :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-trigger.png" alt-text="Select Trigger" border="true":::

    1. Enter a suitable name for your app, such as `commandbot` as the application name. Ensure that you use only alphanumeric characters. Select **Enter** to continue.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/app-name.png" alt-text="Application name." border="true":::

        The Command bot app is created in a few seconds.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/command-bot.png" alt-text="Screenshot showing the app created." border="true":::

        After your app is created, Teams Toolkit displays a message to indicate the location where the project workspace is created. This folder is the default location specified in Visual Studio Code settings.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/location-change.png" alt-text="Location message" border="true":::

        The message offers two options:
        
        - **Change location**
        - **Local Debug**
        
        For this tutorial, you don't need to use these options.

        > [!NOTE]
        > If you choose to change the location for workspace, it's reflected only for projects you create after reloading Visual Studio Code. No change is made to the location of existing projects.

    1. Select **Run and Debug** :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png"::: icon from the Visual Studio Code sidebar.

    1. Select **Debug(Edge)** or **Debug(Chrome)** from the drop-down or select **F5**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/debug-app.png" alt-text="Debugging application" border="true":::

       You'll get the following output in Teams.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/add-app.png" alt-text="Add an App" border="true":::     

    1. Select any of the following in drop-down list:
    
        * **Add to a team**
        * **Add to a chat**
        * **Add to a meeting**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/add-app-drop-down.png" alt-text="Add an App drop-down" border="true":::

       You'll get the following helloWorld command in the app:

         :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/hello-world-command.png" alt-text="Add an App drop-down" border="true":::  

    1. Select the command and select **Enter**.

       You'll receive the following command response in adaptive card:

        :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="final-output" border="true":::      

    # [Command line](#tab/cli)

    Use the `teamsfx` CLI to create your first project. Start from the folder where you want to create the project folder.

    ``` bash
    teamsfx new
    ```

    You can use the CLI to create a new Teams app. The CLI leads you through a series of questions. Every question includes an instruction on answering it.

    For example, use arrow keys to select an option. After you make the choice, select **Enter** to confirm it.

    1. Select **Create a new Teams app**.
    1. Select the **Tab** capability.
    1. Select **Azure** frontend hosting.
    1. Don't select any cloud resources.
    1. Select **JavaScript** as the programming language.
    1. Press **Enter** to select the default workspace folder.
    1. Enter `helloworld` as the name for your app. The name of the app must have only alphanumeric characters.

      After you've answered all the questions, your project is created.

    ---

    ## Take a tour of the tab app source code

    Teams Toolkit provides all components for building an app. After creating the project, you can view the project folders and files in the **Explorer** area of Visual Studio Code.

    :::image type="content" source="~/assets/images/sbs-command-bot/folder-structure.png" alt-text="structure tab" border="true":::


    Although you're free to choose any UI framework (or not to use any), this sample template code provides a scaffolding with React components.

    Among other items in this directory structure, the Toolkit maintains:

    | File name | Contents |
    | --- | --- |
    | `bot/src/internal/initialize.js` | Create the global bot adapter and initialize with Teams Frameworks |
    | `bot/src/index.js` | Server code to host the bot app and listen on /api/messages to process Teams activity with Bot Framework |
    | `bot/src/helloworldCommandHandler.js` | A hello world command handler to process a helloworld command and return an adaptive card as response |
    | `bot/src/adaptiveCards/*.json` | Adaptive card JSON file used as your command response |

- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it!

    You've completed the tutorial to build command response bot with JavaScript.

    Did you come up with something like this?

      :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="final-output" border="true":::
    