### YamlMime:Tutorial
title: Create a new widget
metadata:
  title: Create a new widget
  description: With this learning module, you'll learn how to create a dashboard tab, add a new widget and implement graph API.
  audience: Developer
  level: Beginner
  ms.date: 01/06/2023
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings\build-apps-for-teams-meeting-stage.md
  nextTutorialTitle: Read more on build apps for teams meeting
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    This step-by-step guide helps you to create a dashboard tab, how to add a new widget and implement graph API. You'll see the following output:

    :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard.png" alt-text="Screenshot shows user profile information and recent Teams activity. ":::
    
- title: Prerequisites
  durationInMinutes: 1
  content: |

    * [NodeJS](https://nodejs.org/en/), fully tested on NodeJS 14, 16
    * A Microsoft 365 account. If you don't have Microsoft 365 account, apply one from [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program)
    * [Teams Toolkit Visual Studio Code Extension](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) or [TeamsFx CLI](~/toolkit/TeamsFx-CLI.md)

- title: Create a dashboard
  durationInMinutes: 5
  content: |

    Teams tab dashboard app uses the Fluent UI and the Microsoft Graph API to display a user's profile information and recent Teams activity.

    To create a dashboard:

     1. From Teams Toolkit side bar, select `Create a new Teams app`.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-a-new teams-app.png" alt-text="Screenshot showing the selection of Create a new Teams app":::

     1. Select `Create a new Teams app`. 

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-a-new-teams-app-2.png" alt-text="Screenshot shows the selection of new Teams app.":::

     1. Select `Dashboard tab` from Teams app section.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard-tab-preview.png" alt-text="Screenshot showing the selection of Dashboard tab preview.":::

     1. Select programming language.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/javascript.png" alt-text="Screenshot showing the selection of programming language.":::

     1. Select a workspace folder.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/default-folder.png" alt-text="Screenshot showing the selection of workspace folder.":::

     1. Enter an application name and then select enter.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/enter-application-name.png" alt-text="Screenshot showing the selection of Application name.":::

      In TeamsFX CLI

      If you prefer interactive mode, execute teamsfx new command, then use the keyboard to go through the same flow as in Visual Studio Code.

      * If you prefer non-interactive mode, enter all required parameters in one command.

      `teamsfx new--interactive false--capabilities "dashboard-tab"--programming-language "TypeScript"--folder "./"--app-name dashboard-cli-001`

      After you successfully created the project, start local debugging via F5 in VSCode. 
      
      Select Debug (Microsoft Edge) or Debug (Chrome) debug option of your preferred browser, you'll see a tab app loaded:

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard.png" alt-text="Screenshot shows user profile information and recent Teams activity. ":::

      This app also supports different themes, including dark and high contrast theme.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dark-light-theme.png" alt-text="Screenshot showing the contrast theme.":::
       
   
- title: Add a new widget
  durationInMinutes: 5
  content: |

     Following are the steps to add a new widget to the dashboard:

     1. Define a data model
     2. Create a data retrieve service
     3. Create a widget file
     4. Add the widget to the dashboard

     **Define a data model**

     Define a data model is based on the business scenario, and put it in `tabs/src/models folder`. The widget model must be defined according to the data you want to display in the widget. Here's a sample data model:

     ```export interface SampleModel {
      content: string;
      }

     ```

     **Create a data retrieve service**

     Create a service that returns dummy data. We recommend that you put data files in the tabs/src/data folder, and put data retrieve services in the tabs/src/services folder.

     Here is an example of json file that contains dummy data:

     ```
     {
       "content": "Hello world!"
     }
     ```

     Here's a dummy data retrieve service:

     ```
     import { SampleModel } from "../models/sampleModel";
     import SampleData from "../data/SampleData.json";

     export const getSampleData = (): SampleModel => SampleData;
     ```

      > [!NOTE]
      > You can also implement a service to retrieve data from the backend service or from the Microsoft Graph API.

      **Create a widget file**

      1. Create a widget file in `tabs/src/views/widgets` folder. Extend the `Widget` class. The following table lists the methods that you can override to customize your widget:

      | **File** | **Content** |
      |-----------|-------------|
      | `getData()` | This method is used to get the data for the widget. You can implement it to get data from the backend service or from the Microsoft Graph API. |
      | `headerContent()` | Customize the content of the widget header. |
      | `bodyContent()` | Customize the content of the widget body. |
      | `footerContent()` | Customize the content of the widget footer. |

      > [!NOTE]
      > All methods are optional. If you don't override any method, the default widget layout will be used.

      Here's a sample widget implementation:

      ```
      import { Button, Text } from "@fluentui/react-components";
      import { Widget } from "../lib/Widget";
      import { SampleModel } from "../../models/sampleModel";
      import { getSampleData } from "../../services/sampleService";

      export class SampleWidget extends Widget<SampleModel> {
      async getData(): Promise<SampleModel> {
      return getSampleData();
      }

      headerContent(): JSX.Element | undefined {
      return <Text>Sample Widget</Text>;
      }

      bodyContent(): JSX.Element | undefined {
      return <div>{this.state.data?content}</div>;
      }

      footerContent(): JSX.Element | undefined {
      return (<Button
        appearance="primary"
        size="medium"
        style={{ width: "fit-content" }}
        onClick={() => {}}
      >
        View Details
      </Button>);
      }
      }

      ```

      **Add the widget to the **Dashboard**

      1. Go to `tabs/src/views/dashboards/SampleDashboard.tsx`.
      If you want to create a new dashboard, refer to [How to add a new dashboard](https://github.com/OfficeDev/TeamsFx/wiki/Embed-a-dashboard-canvas-in-Teams).
      
      1. Update your `dashboardLayout()` method to add the widget to the dashboard:

      ```
      protected dashboardLayout(): void | JSX. Element {
      return (<>
      <ListWidget />
      <ChartWidget />
      <SampleWidget />
      </>);
      } 
      ````

      > [!NOTE]
      > If you want the widget in a column, you can use the `oneColumn()`` method to define the column layout. 
      
      Here's an example:

      ```
      protected dashboardLayout(): void | JSX. Element {
      return (<>
      <ListWidget />
      <div style={oneColumn()}>
        <ChartWidget />
        <SampleWidget />
      </div>
      </>);
      }

      ```

- title: Customize the widget
  durationInMinutes: 5
  content: |

    The widget class provides few methods that can be overridden to customize the widget:

    Override `headerContent()`、`bodyContent()`、`footerContent()` to customize the widget.

    ```
    export class NewsWidget extends Widget<void> {

    headerContent(): JSX.Element | undefined {
        return (<div style={headerContentStyle()}>
                <News28Regular />
                <Text style={headerTextStyle()}>Your News</Text>
                <Button icon={<MoreHorizontal32Regular />} appearance="transparent" />
            </div>
        );
    }

    bodyContent(): JSX.Element | undefined {
        return (<div style={contentLayoutStyle()}>
                <Image src="image.svg" style={imageStyle()} />
                <Text style={titleStyle()}>Lorem Ipsum Dolor</Text>
                <Text style={descStyle()}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Enim, elementum sed</Text>
            </div>
        );
    }

    footerContent(): JSX.Element | undefined {
        return (<Button
                appearance="transparent"
                icon={<ArrowRight16Filled />}
                iconPosition="after"
                size="small"
                style={footerButtonStyle()}
                onClick={() => { }} // navigate to detailed page
            >
                View details
            </Button>
        );
    }
    }
    
    ```
    ---

    :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/override-header-count.png" alt-text="Screenshot showing the overriding of header, body, and footer content.":::

    Override bodyContent()、footerContent() to customize the widget.

    ```
    export class NewsWidget extends Widget<void> {

    bodyContent(): JSX.Element | undefined {
        return (<div style={contentLayoutStyle()}>
                <Image src="image.svg" style={imageStyle()} />
                <Text style={titleStyle()}>Lorem Ipsum Dolor</Text>
                <Text style={descStyle()}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Enim, elementum sed</Text>
            </div>
        );
      }

    footerContent(): JSX.Element | undefined {
        return (<Button
                appearance="transparent"
                icon={<ArrowRight16Filled />}
                iconPosition="after"
                size="small"
                style={footerButtonStyle()}
                onClick={() => { }} // navigate to detailed page
            >
                View details
            </Button>
        );
      }
      }
    ```
    ---

    :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/override-body-content-footer-content.png" alt-text="Screenshot showing the overriding of body and footer content":::

    Override bodyContent() to customize the widget

    ```
      export class NewsWidget extends Widget<void> {

      bodyContent(): JSX.Element | undefined {
        return (<div style={contentLayoutStyle()}>
                <Image src="image.svg" style={imageStyle()} />
                <Text style={titleStyle()}>Lorem Ipsum Dolor</Text>
                <Text style={descStyle()}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Enim, elementum sed</Text>
            </div>
        );
        }

        }

    ```
    ---

    :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/override-body-content.png" alt-text="Screenshot showing the overriding of body content.":::

- title: Add a new Graph API call
  durationInMinutes: 5
  content: |

      ### Add SSO First

      Before you add logic of calling a Graph API, you should enable dashboard project to use SSO. It's convenient to add SSO related files by using Teams Toolkit. Refer to the following steps:

      1. Select `Teams Toolkit` in the side bar and Select `Add features` in `DEVELOPMENT`.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/add-features.png" alt-text="Screenshot showing the selection of add features.":::

      1. Select `single sign-on` to add.

        :::image type="content" source="~/assets/images/ci-cd-workflows.png" alt-text="Screenshot showing the selection of CI/CD workflows.":::

      1. Move `auth-start.html` and `auth-end.html` in `auth/tab/public folder` to `tabs/public/`. These two HTML files are used for auth redirects.

      1. Move `sso` folder under `auth/tab` to `tabs/src/sso/`.

      Now you've added the SSO files to your project, you can call Graph APIs. 
      
      There are two types of Graph APIs:
      * Front-end(most of APIs, use delegated permissions), 
      * Back-end(sendActivityNotification, for example, use application permissions). 
      
      Refer [tutorial](/graph/api/overview?view=graph-rest-beta) to check permission types of the Graph APIs you want to call.

      ### Call graph api from the front-end(use delegated permissions)**

      If you want to call a Graph API from the front-end tab, refer to the following steps:

      1. [Consent delegated permissions first](https://github.com/huimiu/tab-dashboard#step-1-consent-delegated-permissions-first)
      1. [Create a graph client by adding the scope related to the Graph API you want to call](https://github.com/huimiu/tab-dashboard#step-2-create-a-graph-client-by-adding-the-scope-related-to-the-graph-api-you-want-to-call)
      1. [Call the Graph API, and parse the response into a certain model, which will be used by front-end](https://github.com/huimiu/tab-dashboard#step-3-call-the-graph-api-and-parse-the-response-into-a-certain-model-which-will-be-used-by-front-end)

      **Consent delegated permissions first**

      You can call [`addNewPermissionScope(scopes: string[])`](https://github.com/huimiu/tab-dashboard/blob/main/tabs/src/internal/addNewScopes.ts) to consent the scopes of permissions you want to add. And the consented status will be preserved in a global context [`FxContext`](https://github.com/huimiu/tab-dashboard/blob/main/tabs/src/internal/singletonContext.ts).

      You can refer to the [Graph API V1.0](/graph/api/overview?view=graph-rest-1.0) to get the `scope name of the permission` related to the Graph API you want to call.

      **Create a graph client by adding the scope related to the Graph API you want to call.**

      Refer to the following code snippet:

      ```

      let teamsfx: TeamsFx;
      teamsfx = FxContext.getInstance().getTeamsFx();
      const graphClient: Client = createMicrosoftGraphClient(teamsfx, scope);

      ```

      **Call the Graph API, and parse the response into a certain model, which will be used by front-end**

      You can refer to the following code snippet:

      ```
      try {
      const graphApiResult = await graphClient.api("<GRAPH_API_PATH>").get();
      // Parse the graphApiResult into a Model you defined, used by the front-end.
      } catch (e) {}

      ```

      ### Call graph API from the back-end(use application permissions)

      If you want to call a Graph API from the back-end, you can refer to the following steps:

      1. [Consent application permissions first](https://github.com/huimiu/tab-dashboard#step-1-consent-application-permissions-first)
      1. [Add an Azure Function](https://github.com/huimiu/tab-dashboard#step-2-add-an-azure-function)
      1. [Add your logic in Azure Function](https://github.com/huimiu/tab-dashboard#step-4-add-your-logic-in-azure-function)
      1. [Call the Azure Function from the front-end](https://github.com/huimiu/tab-dashboard#step-5-call-the-azure-function-from-the-front-end)

      **Consent application permissions first.**

      1. Go to [Azure portal](https://ms.portal.azure.com/#home).
      1. Select `Azure Active Directory`.
      1. Select `App registrations` in the side bar. 
      1. Select your Dashboard app.
      1. Select `API permissions` in the side bar.
      1. Select `+Add a permission`.
      1. Select `Microsoft Graph`.
      1. Select `Application permissions`.
      1. Find the permissions you need.
      1. Select `Add permissions` button in the bottom.
      1. Select `✔Grant admin consent for XXX`.
      1. Select `Yes` button to finish the admin consent.

      **Add an Azure Function**

      In the Visual Studio Code side bar, select `Add features` in `Teams Toolkit` > select `Azure functions` and enter the function name.

       :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/azure-functions.png" alt-text="Screenshot showing the selection of Azure functions.":::

      **Add your logic in Azure Function**

      In the `index.ts`/`index.ts` under the folder named in step 2, you can add your logic that contains back-end graph api calling with application permissions. Refer to the following code snippet:
      
      ```
      /**
      * This function handles requests from teamsfx client.
      * The HTTP request should contain an SSO token queried from Teams in the header.
      * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
      *
      * You should initialize the teamsfx SDK with the configuration and calls these APIs.
      *
      * The response contains multiple message blocks constructed into a JSON object, including:
      * - An echo of the request body.
      * - The display name encoded in the SSO token.
      * - Current user's Microsoft 365 profile if the user has consented.
      *
      * @param {Context} context - The Azure Functions context object.
      * @param {HttpRequest} req - The HTTP request.
      * @param {teamsfxContext} TeamsfxContext - The context generated by teamsfx binding.
      */
      export default async function run(
      context: Context,
      req: HttpRequest,
      teamsfxContext: TeamsfxContext
      ): Promise<Response> {
      context.log("HTTP trigger function processed a request.");

      // Initialize response.
      const res: Response = {
      status: 200,
        body: {},
      };

      // Your logic here.

      return res;
      }

      ```
      ---

      **Call the Azure Function from the front-end**

      Call the Azure Function by function name. You can refer to the following code snippet to call the Azure Function:

      ```
      const functionName = process.env.REACT_APP_FUNC_NAME || "myFunc";
      async function callFunction(teamsfx? TeamsFx) {
      if (!teamsfx) {
      throw new Error("TeamsFx SDK isn't initialized.");
      }
      try {
      const credential = teamsfx.getCredential();
      const apiBaseUrl = teamsfx.getConfig("apiEndpoint") + "/api/";
      // createApiClient(...) creates an Axios instance, which uses BearerTokenAuthProvider to inject token to request header
      const apiClient = createApiClient(
      apiBaseUrl,
      new BearerTokenAuthProvider(async () => (await credential.getToken(""))!token
      )
      );
      const response = await apiClient.get(functionName);
      return response.data;
      } catch (e) {}
      }

      ```
      ---

      For more information, see the following:

      * [sample](https://github.com/OfficeDev/TeamsFx-Samples/blob/dev/hello-world-tab-with-backend/tabs/src/components/sample/AzureFunctions.tsx)
      * [Azure functions](/azure/azure-functions/functions-reference?tabs=blob)

- title: Complete challenge
  durationInMinutes: 5
  content: |

      Did you come up with something like this?

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard.png" alt-text="Screenshot shows user profile information and recent Teams activity. ":::


- title: Congratulations!
  durationInMinutes: 5
  content: |

    You've completed the tutorial!
