### YamlMime:Tutorial
title: Send notification in Teams using JavaScript
metadata:
  title: Send notification in Teams using JavaScript
  description: In this tutorial, you'll learn to send notification in Teams with JavaScript.
  audience: Developer
  level: Beginner
  ms.date: 05/04/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Back to Get started overview
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    A notification bot is an app that proactively sends messages in Teams channel or group chat or personal chat. Once triggered, it sends text or cards to Teams.
    
    In this tutorial, you'll learn:

    - How to create a new notification bot with Teams Toolkit
    - About the directory structure of your app
    - How to send multiple notifications

    This step-by-step guide helps you to send notification to Teams. You'll see the following output:

      :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="Trigger Output"border="true":::

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Here's a list of tools you'll need for building and deploying your apps.

   | &nbsp; | Install | For using... |
   | --- | --- | --- |
   | **Required** | &nbsp; | &nbsp; |
   | &nbsp; | [Teams Toolkit](#install-the-teams-toolkit) | A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use version 3.8.1. |
   | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call - all in one place.|
   | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. Use the latest version.|
   | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, or TypeScript, build environments. Use latest version. |
   | &nbsp; | [Microsoft 365](https://developer.microsoft.com/en-us/microsoft-365/dev-program) | Access to Teams account with the appropriate permissions to install an app. |
   
   ## Prepare development environment

   After you've installed the required tools, set up the development environment.


   ### Install the Teams Toolkit

   The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Teams store, and more. 
    
   You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.

   # [Visual Studio Code](#tab/vscode)

   1. Open Visual Studio Code and select the **Extensions** view (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).
   1. In the search box, enter **Teams Toolkit**.
   1. Select **Install** next to the Teams Toolkit.

    :::image type="content" source="~/assets/images/sbs-notification-bot/teams-toolkit.png" alt-text="Illustration shows the Teams Toolkit extension installation." border="true":::

    The Teams Toolkit icon appears in the Visual Studio Code sidebar after it's installed.

    :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png" alt-text="Illustration shows the Teams Toolkit icon in Visual Studio Code sidebar." border="true":::

   You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

   # [Command line](#tab/cli)

   To install the TeamsFx CLI, use the `npm` package manager:

   ``` bash
   npm install -g @microsoft/teamsfx-cli
   ```

   Depending on your configuration, you may need to use `sudo` to install the CLI:

   ``` bash
   sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
   ```

   This condition is more common on Linux and macOS systems.

   Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  

   You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

   > [!CAUTION]
   > Before you can run TeamsFx in PowerShell terminals, you must enable the "remote signed" execution policy for PowerShell.

   ---

   ## Set up your Teams development tenant

   A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where your sideload and test your app. Let's verify if you're ready to develop with the tenant.

   ### Check for sideloading option

   After creating the app, you must load your app in Teams without distributing it. This process is known as sideloading. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Sideloading is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you won't be able to preview and test your app in Teams locally.

   Do you already have a tenant, and do you have the admin access? Let's check if you really do!

   Verify if you can sideload apps in Teams:

    1. In the Teams client, select the **Store** icon.
    1. Select **Manage your apps**.
    1. Select **Publish an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > If you don't have the option to upload a custom app, talk to your Teams administrator.

   ### Create a free Teams developer tenant (optional)

   If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

   1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
   1. Select **Join Now** and follow the onscreen instructions.
   1. In the welcome screen, select **Set up E5 subscription**.
   1. Set up your administrator account. After you finish, the following screen appears.

       :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Microsoft" border="true":::

   1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

- title: Create a new notification bot app
  durationInMinutes: 1
  content: |
   # [Visual Studio Code](#tab/vsc)

    1. Open Visual Studio Code.
    
    1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code sidebar.

    1. Select **Create a new Teams app**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/create-new-teams-app.png" alt-text="Location of the Create New Project link in the Teams Toolkit sidebar." border="true":::

    1. Select **Create a new Teams app** to create an app using Teams Toolkit.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/create-new-app.png" alt-text="Wizard starts for creating a new project" border="true":::

    1. Ensure that **Notification Bot** is selected as the capability that you want to build in your app. Select **OK**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-notification-bot.png" alt-text="Select App Capability" border="true":::

    1. Select **JavaScript** as the programming language.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-script.png" alt-text="Screenshot showing how to select the programming language." border="true":::

    1. Select **HTTP Trigger** as the trigger. Select **OK**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-trigger.png" alt-text="Screenshot showing how to select the programming language." border="true":::  

    1. Enter a suitable name for your app, such as `mynotificationbot`. Ensure that you use only alphanumeric characters. Select **Enter** to continue.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/type-notfication-name.png" alt-text="Screenshot showing where to enter the app name." border="true":::

        The Notification bot app is created in a few seconds.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/my-notification-bot.png" alt-text="Screenshot showing the app created." border="true":::

        After your app is created, Teams Toolkit displays a message to indicate the location where the project workspace is created. This folder is the default location specified in Visual Studio Code settings.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/location-change.png" alt-text="Location message"border="true":::

        The message offers two options:
        
        - **Change location**
        - **Local Debug**
        
        For this tutorial, you don't need to use these options.

        > [!NOTE]
        > If you choose to change the location for workspace, it's reflected only for projects you create after reloading Visual Studio Code. No change is made to the location of existing projects.
    
    1. Select **Run and Debug** :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png"::: icon from the Visual Studio Code sidebar.

    1. Select **Debug(Edge)** or **Debug(Chrome)** from the drop-down or select **F5**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/debug-app.png" alt-text="App Debugging"border="true":::

       You'll get the following output in Teams:

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/my-notification-output.png" alt-text="My Notification Output"border="true"::: 

    1. Select any of the following in the drop-down list:
    
         * **Add to a team**
         * **Add to a chat** 
         * **Add to a meeting**

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/my-notification-output1.png" alt-text="My Notification Output1"border="true":::

    **Run PowerShell to trigger to Teams**

    1. Open **Windows PowerShell**.

    1. Run the `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` command.

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png" alt-text="Powershell Trigger"border="true":::   

        You'll get the following output in Teams:

          :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="Trigger Output"border="true":::

    # [Command line](#tab/cli)

    Use the `teamsfx` CLI to create your first project. Start from the folder where you want to create the project folder.

    ``` bash
    teamsfx new
    ```

    You can use the CLI to create a new Teams app. The CLI leads you through a series of questions. Every question includes an instruction on answering it.

    For example, use arrow keys to select an option. After you make the choice, select **Enter** to confirm it.

    1. Select **Create a new Teams app**.
    1. Select the **Tab** capability.
    1. Select **Azure** frontend hosting.
    1. Don't select any cloud resources.
    1. Select **JavaScript** as the programming language.
    1. Press **Enter** to select the default workspace folder.
    1. Enter `helloworld` as the name for your app. The name of the app must have only alphanumeric characters.

      After you've answered all the questions, your project is created.

    ---

    ## Take a tour of the source code

    Teams Toolkit provides all components for building an app. After creating the project, you can view the project folders and files in the **Explorer** area of Visual Studio Code.

    :::image type="content" source="~/assets/images/sbs-notification-bot/folder-structure.png" alt-text="structure tab" border="true":::


    Although you're free to choose any UI framework (or not to use any), this sample template code provides a scaffolding with React components.

    This new project folder structure looks like:

    | Folder name | Contents |
    | --- | --- |
    | `.fx` | Project level settings, configuration, and environment information |
    | `vs code` | VS code files for local debug |
    | `bot` | The bot source code |
    | `templates` | Templates for Teams app manifest and corresponding Azure resources |
    
     The core notification implementation is in `bot` folder, containing following content:

    | File or Folder name | Contents |
    | --- | --- |
    | `src/adaptiveCards/` | Templates for Adaptive card  |
    | `src/internal/` | Generated initialize code for notification functionality |
    | `src/index.*s` | The entrypoint to handle bot messages and send notifications |
    | `.gitignore` | The git ignore file to exclude local files from bot project |
    | `package.json` | The NPM package file for bot project |

- title: Send notification to Teams channel
  durationInMinutes: 1
  content: |

    1. In Visual Studio Code, select **Explorer> My Notification app> bot> src> index.js**.

        :::image type="content" source="~/assets/images/sbs-notification-bot/file-path.png" alt-text="File path" border="true":::

       The following page opens:

         :::image type="content" source="~/assets/images/sbs-notification-bot/default-program.png" alt-text="Default Program" border="true":::

    1. Use the following code after `for (const target of await bot.notification.installations()) { ` in Visual studio code.

         ```bash
         if (target.type === "Channel") {
         const members = await target.members();
         await target.sendMessage("This is a message to channel: " + members.length + " members.");
         for (const member of members) {
         await member.sendMessage("This is a message to Member: " + member.account.email);
         }
         }
         /* 
         ```  

          :::image type="content" source="~/assets/images/sbs-notification-bot/code-add.png" alt-text="Code Add" border="true":::

    1. Select **Run and Debug** :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png"::: icon from the Visual Studio Code sidebar.

    1. Select **Debug(Edge)** or **Debug(Chrome)** from the drop-down or select **F5**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/debug-app.png" alt-text="App Debugging" border="true":::

        You'll get the following output in Teams.

          :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/app-installation.png" alt-text="App Installation" border="true":::

    1. Select any of the following in the drop-down list:
    
         * **Add to a team**
         * **Add to a chat** 
         * **Add to a meeting**

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/app-installation1.png" alt-text="My Notification Output1" border="true":::

    1. In **Search box**, add any **channel** and select **Set up a bot**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/setup-bot.png" alt-text="Setup Bot" border="true":::

       The following screen appears:

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/channel-notification.png" alt-text="Channe1 Notification" border="true":::

    1. Open **Windows PowerShell**.

    1. Run the `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` command.

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png" alt-text="Powershell Trigger"border="true":::   

       You'll get the notification to the Teams channel:

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/channel-output.png" alt-text="Channel Output" border="true":::

       You'll get the notification to the personal chat:         

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/member-output.png" alt-text="member-output" border="true":::
    
- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

    You've learned to create, build, and run Teams app with Notification bot capabilities. The final step is to deploy your app on Azure.

    Let's deploy the first app with Notification bot capability on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use this account to access the Microsoft Azure portal and to provision new cloud resources to support your app.

    # [Visual Studio Code](#tab/viscode)

    1. Open Visual Studio Code.
    1. Open the project folder in which you created the tab app.
    1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the sidebar.
    1. Select **Sign in to Azure**.

        > [!TIP]
        > If you have the Azure Account extension installed and are using the same account, you can skip this step. Use the same account as you are using in other extensions.

        Your default web browser opens to let you sign in to the account.
    1. Sign in to your Azure account using your credentials.
    1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Now you're ready to deploy your app to Azure!

        Congratulations, you have created Notification bot in Teams apps! 
        Now let's go ahead and learn how to deploy app to Azure using the Teams Toolkit.

    # [Command line](#tab/cline)

    1. Sign in to Microsoft 365 with the TeamsFx CLI:

        ``` bash
        teamsfx account login m365
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

    2. Sign in to Azure with the TeamsFx CLI:

        ``` bash
        teamsfx account login azure
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

        The account logins are shared between Visual Studio Code and the TeamsFx CLI.

        Congratulations, you have created Notification bot in Teams apps! 
        Now let's go ahead and learn how to deploy app to Azure using the Teams Toolkit.

    ---

    ## Deploy your app to Azure

      Deployment consists of two steps.  First, necessary cloud resources are created (also known as provisioning). Then, your app's code is copied into the created cloud resources. For this tutorial, you will deploy the tab app.

     > <details>
     > <summary>What's the difference between Provision and Deploy?</summary>
     >
     > The **Provision** step creates resources in Azure and Microsoft 365 for your app, but no code (HTML, CSS, JavaScript, etc.) is copied to the resources. The **Deploy** step copies the code for your app to the resources you created during the provision step. It is common to deploy multiple times without provisioning new resources. Since the provision step can take some time to complete, it is separate from the deployment step.
     </details>

    # [Visual Studio Code](#tab/vscode)

      Select the Teams Toolkit :::image type="icon" source="~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code sidebar.

    1. Select **Provision in the Cloud**.

        :::image type="content" source="~/assets/images/sbs-notification-bot/provision-cloud.png" alt-text="Screenshot showing the provisioning commands" border="true":::

    1. Select a subscription to use for the Azure resources.
    
        :::image type="content" source="~/assets/images/sbs-notification-bot/subscription-cloud.png" alt-text="Screenshot showing resources for provisioning" border="true":::

     > [!NOTE]
     > There are always some Azure resources used for hosting your app.

     A dialog warns you that costs may be incurred when running resources in Azure.

    1. Select **Provision**.

        :::image type="content" source="~/assets/images/sbs-notification-bot/provision-confirm.png" alt-text="Screenshot of the provisioning dialog." border="true":::

       The provisioning process creates resources in the Azure cloud. It may take some time. You can monitor the progress by watching the dialogs in the bottom-right corner. After a few minutes, you see the following notice:

        :::image type="content" source="~/assets/images/sbs-notification-bot/deploy-provision-success.png" alt-text="Screenshot showing the provisioning complete dialog." border="true":::

         If you want you can view the provisioned resources. For this tutorial, you don't need to view resources.

         The provisioned resource appears in the **Environment** section.

        :::image type="content" source="~/assets/images/sbs-notification-bot/provisioned-resources-env.png" alt-text="Screenshot showing the provisioning complete dialog." border="true":::

    1. Select **Deploy to the Cloud** from the **Deployment** panel after provisioning is complete.

        :::image type="content" source="~/assets/images/sbs-notification-bot/deploy-cloud.png" alt-text="Screenshot showing the where to click to deploy to cloud." border="true":::

          A dialog confirms the deploy resources in dev environments.

    1. Select **Deploy**

        :::image type="content" source="~/assets/images/sbs-notification-bot/Deploy-confirm.png" alt-text="Deploy to confirm." border="true":::

          As with provisioning, deployment takes some time. You can monitor the process by watching the dialogs in the bottom-right corner. After a few minutes, you see a completion notice.

         Now, you can use the same process to deploy your Bot and Message Extension apps to Azure.

         
    # [Command Line](#tab/cli)

    In your terminal window:

    1. Run `teamsfx provision`.

       ``` bash
       teamsfx provision
      ```

      When prompted, select an Azure subscription to use Azure resources.

      > [!NOTE]
      > There are always some Azure resources used for hosting your app.

    1. Run `teamsfx deploy`.

       ``` bash
       teamsfx deploy
       ```

    ---

    ## Run the deployed app

    Once the provisioning and deployment steps are complete:

    1. Select the **Local Debug** in environment section from Visual Studio Code.

         :::image type="content" source="~/assets/images/sbs-notification-bot/local-debug.png" alt-text="Local Debug." border="true":::

    1. Select **Debug Edge** from the drop-down.

        :::image type="content" source="~/assets/images/sbs-notification-bot/debug-cloud.png" alt-text="Local Debug." border="true":::

        You'll get the following output in Teams

        :::image type="content" source="~/assets/images/sbs-notification-bot/app-cloud-output.png" alt-text="App cloud output." border="true":::

    1. Select any of the following in the drop-down list:
    
         * **Add to a team**
         * **Add to a chat** 
         * **Add to a meeting**

        :::image type="content" source="~/assets/images/sbs-notification-bot/app-cloud-output1.png" alt-text="App cloud output1" border="true":::
    
    1. Open **Windows PowerShell**.

    1. Run the `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` command.

        :::image type="content" source="~/assets/images/sbs-notification-bot/windows-powershell1.png" alt-text="Windows Powershell" border="true":::

        You'll get the notification in Teams:

        :::image type="content" source="~/assets/images/sbs-notification-bot/cloud-final-output.png" alt-text="Cloud Final Output" border="true":::

    Congratulations! Your Notification bot app is now running locally from Azure!


    <!-- markdownlint-disable MD033 -->
    <details>
    <summary>Learn what happens when you deployed your app to Azure</summary>

    Before deployment, the application has been running locally:

    * The backend runs using **Azure Functions Core Tools**.
    * The application HTTP endpoint, where Microsoft Teams loads the application, runs locally.

    Deployment is a two-step process. You provision the resources on an active Azure subscription, and then deploy or upload the backend and frontend code for the application to Azure.

    * The backend, if configured, uses various Azure services, including Azure App Service and Azure Storage.
    * The frontend application will be deployed to an Azure Storage account configured for static web hosting.

    </details>

- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it!

    You've created a new notification bot with Teams Toolkit.

    You've completed the tutorial to create notification bot with JavaScript.

    Did you come up with something like this?

     :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="Trigger Output"border="true":::
    