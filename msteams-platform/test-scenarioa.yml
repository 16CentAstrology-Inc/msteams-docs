### YamlMime:Tutorial
title: Send Proactive Message
metadata:
  title: Send Proactive Message
  description: In this scenario, you'll learn how to send proactive messages
  audience: Developer
  level: Beginner
  ms.date: 06/21/2021
  ms.topic: interactive-tutorial
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: |
    A proactive message is any message sent by a bot that is not in response to a request from a user. This can include messages, such as:
     - Welcome messages
     - Notifications
     - Scheduled messages

- title: Prerequisites
  durationInMinutes: 2
  content: |
    1.	Install [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/). 
        > [!NOTE]
        > Ensure you install the ASP.NET and web development or [.NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer) cross-platform development workload.
    1.	Install [Ngrok](https://ngrok.com/download). Ngrok is a cross-platform application that enables you to expose a local development server to the internet with minimal effort.

- title: Setup local environment
  durationInMinutes: 3
  content: |
    1.	Download sample code from [Zip file](https://github.com/Wajeed-msft/SampleCodeZipFiles/raw/main/SendProactiveMessages.zip) and extract the files.
    1.	Double-click `ProactiveBot.csproj` file from the extracted files. It opens the solution in Visual Studio.
    1.	Right-click the project and build the solution.

        ![Proactivebot project](~/assets/images/proactive-scenario/proactivebot-project.png)

        <br>

        <details>

        <summary><b>Error: Unable to find package</b></summary>

        If you get Unable to find package error, perform the following steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** Window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	Type *nuget.org* in the **Name** and *https://api.nuget.org/v3/index.json* in the **Source**.
        1.	Select **Update** and **Ok**.
        1.	Rebuild your project.
        <br>

        </details>

    1. Start the Ngrok. Follow the command in terminal window where Ngrok is downloaded `ngrok.exe http 3978 --host-header=localhost`.
       
        ![Ngrok base URL](~/assets/images/proactive-scenario/ngrok-base-url.png)

    1. Copy the `Ngrok` URL, for further reference as `Ngrok base URL` in the next steps.    

- title: Create and Install Teams App
  durationInMinutes: 5
  content: |
    1. Go to App Studio and import the manifest file present in the Zip File, `AppManifest.zip`.

        ![App Studio import App](~/assets/images/proactive-scenario/app-studio-import-app.png) 

    1. Create a Bot and update the Bot ID.

        ![Bot setup](~/assets/images/proactive-scenario/bot-setup.png)     

        ![Create Bot ID](~/assets/images/proactive-scenario/create-bot-id.png)   

    1. Append `/api/message` to `Ngrok base URL` and set it as endpoint address. Your URL would look like this: `https://yourngrokdomain.ngrok.io/api/message`.
    
        ![Bot endpoint address](~/assets/images/proactive-scenario/bot-endpoint-address.png)

    1. Wait for few seconds for changes to take effect. Revisit **Bots** section by selecting **Tabs** section to force update if it is taking longer.
    1. Generate the App Password and copy it to `appsettings.json` file in your Visual Studio as value for `MicrosoftAppPassword`.
    
        ![Generate app password](~/assets/images/proactive-scenario/generate-app-password.png)

    1. Copy the App ID to `appsettings.json` file as value for `MicrosoftAppId`. Your appsetting.json must have the following setting values:    

        ![Generate app ID](~/assets/images/proactive-scenario/generate-app-id.png)

        ![Appsetting values](~/assets/images/proactive-scenario/app-setting-values.png)

    1. Run the code by pressing `F5` or click the play run button.

        ![Run code](~/assets/images/proactive-scenario/run-code.png)
    
        The corresponding proactive message sample as follows:  

        ![Sample proactive message](~/assets/images/proactive-scenario/proactive-message-sample.png)

    1. Go to App Studio and install the App.

        ![Install App](~/assets/images/proactive-scenario/install-app.png)   

    1. You will receive a welcome message from bot when installation is successful.
    1. Go to `http://localhost:3978/api/notify` to get `proactive hello` in chat.    

        ![Proactive helo in chat](~/assets/images/proactive-scenario/proactive-helo.png)

- title: Add Adaptive card to proactive message
  durationInMinutes: 10
  content: |
    1. Stop the debugging process.

        ![Stop debug](~/assets/images/proactive-scenario/stop-debug.png)

    1. Add Adaptive Card package.

        ![Add Adaptive Card package1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)


        ![Add Adaptive Card package2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)


    1. Replace the existing `BotCallback` code present in `NotifyController.cs` to send Adaptive Card message. 
       Following is the corresponding code:    

       private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)
        {
                    AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));

                    card.Body.Add(new AdaptiveTextBlock()
                    {
                        Text = "Proactive Hello",
                        Size = AdaptiveTextSize.ExtraLarge
                    });

                    card.Body.Add(new AdaptiveImage()
                    {
                        Url = new Uri("http://adaptivecards.io/content/cats/1.png")
                    });

                    Attachment attachment = new Attachment()
                    {
                        ContentType = AdaptiveCard.ContentType,
                        Content = card
                    };

                    await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));
        }
      
    1. Resolve the errors by adding required using for Adaptive Card. Hover over the squiggly red line and select using AdaptiveCards.
    1. Press F5 to run the code. 
    1. Go to Teams UI and uninstall the App. Reinstall the same app so that we get the `conversationUpdate` event.
    1. Go to http://localhost:3978/api/notify to get proactive `Hello` in Adaptive Card.

- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this?
    
    ![proactive helo in Adaptive Card](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)

- content: |
    You have completed the scenario.
    1. You can send notification on daily basis or request for feedback from user on periodic basis.
    1. Handle [throttling limits](https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/rate-limit) to avoid multiple notifications.
    
   
