### YamlMime:Tutorial
title: Sending Proactive Message
metadata:
  title: Sending Proactive Message
  description: In this scenario, you'll learn how to send proactive messages
  audience: Developer
  level: Beginner
  ms.date: 06/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Numbers in C#
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: |
    A proactive message is any message sent by a bot that is not in response to a request from a user. This can include messages, such as:
    - Welcome messages
    - Notifications
    - Scheduled messages

- title: Prerequisites
  durationInMinutes: 2
  content: |
    1.	Install [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/). 
        > [!NOTE]
        > Ensure you install the ASP.NET and web development or [.NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer) cross-platform development workload.
    1.	Install [Ngrok](https://ngrok.com/download).

- title: Setup local environment
  durationInMinutes: 3
  content: |
    1.	Download code from Zip file for sample and extract the files.
    1.	Double click ProactiveBot.csproj file which will open the solution in Visual Studio.
    1.	Right click on the project and build the solution.
        <image>
        1. If you get Unable to find package error: Follow these steps:
        1.  Go to Tools > NuGet Package Manager > Package Manager Settings.
        1.	In the Options Window that appears, select NuGet Package Manager > Package Sources.
        2.	Click Add.
        3.	Type nuget.org in the Name and https://api.nuget.org/v3/index.json in the Source.
        4.	Click Update and Ok.
        5.	Rebuild your project
    1. Start the ngrok by running following command in terminal window where ngrok is downloaded ngrok.exe http 3978 --host-header=localhost
       <image>
    1. Copy the ngrok URL, we will refer this as ngrok base URL in next steps.

    

- title: Work with strings
  durationInMinutes: 5
  content: |
    Your last edit was our first look at what you can do with strings. Let's explore more.

    You're not limited to a single variable between the curly braces. Try this:

    ```csharp
    string firstFriend = "Maria";
    string secondFriend = "Sage";
    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");
    ```

    As you explore more with strings, you'll find that strings are more than a collection of letters. You can find the length of a string using `Length`. `Length` is a **property** of a string and it returns the number of characters in that string. Add the following code at the bottom of the interactive window:

    ```csharp
    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");
    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");
    ```

    > [!TIP]
    > This is a good time to explore on your own. You've learned that `Console.WriteLine()`
    > writes text to the screen. You've learned how to declare variables and
    > concatenate strings together. Experiment in the interactive window. The window has a feature called *IntelliSense* that
    > makes suggestions for what you can do. Type a `.` after the `d` in `firstFriend`. You'll see a list of suggestions for properties
    > and methods you can use.

- title: Create and Install Teams App
  durationInMinutes: 5
  content: |
    1. Got to App Studio and import the manifest file present in the Zip File (AppManifest.zip) <add image>
    1. Create a Bot and update the Bot Id and Secret to the code
    1. Append /api/message to  Ngrok base URL and set it as endpoint address. Your URL would look like this: https://yourngrokdomain.ngrok.io/api/message
    1. Wait for few seconds for changes to take effect. Revisit Bots section by selecting Tabs section to force update if itâ€™s taking longer.
    1. Generate the App Password and copy it to appsettings.json file in your Visual Studio as value for MicrosoftAppPassword
    1. Copy the App Id to appsettings.json file as value for MicrosoftAppId
    1. Run the code by pressing F5 or clicking on play run button.

- title: Add Adaptive card to proactive message
  durationInMinutes: 10
  content: |
    The other part of a *search and replace* operation is to find text in a
    string. You can use the  <xref:System.String.Contains%2A> method for searching. It
    tells you if a string contains a substring inside it. Try the following
    code to explore <xref:System.String.Contains%2A>:

    ```csharp
    string songLyrics = "You say goodbye, and I say hello";
    Console.WriteLine(songLyrics.Contains("goodbye"));
    Console.WriteLine(songLyrics.Contains("greetings"));
    ```

    The <xref:System.String.Contains%2A> method returns a *boolean* value which tells you if the
    string you were searching for was found. A *boolean* stores either a `true` or a
    `false` value. When displayed as text output, they are capitalized: `True` and `False`, respectively. You'll learn more about *boolean* values
    in a later lesson.

    ***Challenge***

    There are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string. These find a substring at the beginning or the
    end of the string. Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and
    <xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>. Search for "You" or "goodbye" at the beginning of a string. Search for "hello" or "goodbye" at the end of a string.

    > [!NOTE]
    > Watch your punctuation when you test for the text at the end of the string. If the string
    > ends with a period, you must check for a string that ends with a period.

    You should get `true` for starting with "You" and ending with "hello" and false for starting with or ending with "goodbye".

- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this?

    ```csharp
    string songLyrics = "You say goodbye, and I say hello";
    Console.WriteLine(songLyrics.StartsWith("You"));
    Console.WriteLine(songLyrics.StartsWith("goodbye"));

    Console.WriteLine(songLyrics.EndsWith("hello"));
    Console.WriteLine(songLyrics.EndsWith("goodbye"));
    ```

- content: |
    You've completed the "Hello C#" introduction to C# tutorial. You can select the **Numbers in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding. The "Next steps" section brings you back to these tutorials.

    For further reading on the `string` type:
    - [C# Programming Guide](../../programming-guide/index.md) topic on [strings](../../programming-guide/strings/index.md).
    - [How to tips on working with strings](../../how-to/index.md#working-with-strings).
