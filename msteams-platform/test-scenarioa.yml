### YamlMime:Tutorial
title: Send Proactive Message
metadata:
  title: Send Proactive Message
  description: In this scenario, you'll learn how to send proactive messages
  audience: Developer
  level: Beginner
  ms.date: 06/21/2021
  ms.topic: interactive-tutorial
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: |
    A proactive message is any message sent by a bot that is not in response to a request from a user. This can include messages, such as:
     - Welcome messages
     - Notifications
     - Scheduled messages
     
    This scenario helps you to get a Welcome message from the bot. You will see the following outputs:

    * Welcome message in chat        
    ![Proactive helo in chat](~/assets/images/proactive-scenario/proactive-helo.png)

    * Welcome message in Adaptive Card    
    ![proactive helo in Adaptive Card](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png) 

- title: Prerequisites
  durationInMinutes: 2
  content: |
    Ensure that you install the following:    

    * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/).
    * [ASP.NET and web development](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer), or [.NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer) cross-platform development workload.
    * [Ngrok](https://ngrok.com/download): A cross-platform application that enables you to expose a local development server to the internet with minimal effort.

- title: Setup local environment
  durationInMinutes: 3
  content: |
    1.	Download sample code from [Zip file](https://github.com/Wajeed-msft/SampleCodeZipFiles/raw/main/Send%20Proactive%20Messages.zip) and extract the files.
    1.	Double-click `ProactiveBot.csproj` file from the extracted files.     
        The solution opens in Visual Studio.
    1.	Right-click the project (**ProactiveBot**) and select **Build** to build the solution.

        ![Proactivebot project](~/assets/images/proactive-scenario/proactivebot-project.png)

        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, perform the following steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	Type *nuget.org* in the **Name** and `https://api.nuget.org/v3/index.json` in the **Source** fields.
        1.	Select **Update** and **Ok**.
        1.	Rebuild your project.
        <br>

        </details>

    1. Go to the folder where Ngrog is saved and extract the files.
    1. Open the `ngrok-stable window.amd` folder.
    1. Double-click the `ngrok.exe` file. The terminal window opens:

        ![Ngrok terminal window](~/assets/images/proactive-scenario/ngrok-terminal-window.png)

    1. Type the `ngrok.exe http 3978 --host-header=localhost` command in terminal window to start Ngrok.
            
    1. Copy the `Ngrok` URL, for further reference as `Ngrok base URL` in the next steps. 

        ![Ngrok base URL](~/assets/images/proactive-scenario/ngrok-base-url.png)   

- title: Create and Install Teams App
  durationInMinutes: 5
  content: |
    1. Go to App Studio and import the `AppManifest.zip` file available in the downloaded Zip file.

        ![App Studio import App](~/assets/images/proactive-scenario/app-studio-import-app.png) 

    1. Select **Bots** and select **Set up**.

        ![Bot setup](~/assets/images/proactive-scenario/bot-setup.png)  

    1. Create the Bot ID.

        ![Create Bot ID](~/assets/images/proactive-scenario/create-bot-id.png)   

    1. Append `/api/messages` to `Ngrok base URL` and set it as endpoint address. Your URL would look like this: `https://yourngrokdomain.ngrok.io/api/message`.
    
        ![Bot endpoint address](~/assets/images/proactive-scenario/bot-endpoint-address.png)

    1. Wait for few seconds for changes to take effect.     

        > [!TIP] 
        > Revisit **Bots** section by selecting **Tabs** section to force update if it is taking longer.
    
    1. Generate the App Password and copy it to `appsettings.json` file in your Visual Studio as value for `MicrosoftAppPassword`.
    
        ![Generate app password](~/assets/images/proactive-scenario/generate-app-password.png)

    1. Copy the App ID to `appsettings.json` file as value for `MicrosoftAppId`. Your appsetting.json must have the following setting values:    

        ![Generate app ID](~/assets/images/proactive-scenario/generate-app-id.png)

        ![Appsetting values](~/assets/images/proactive-scenario/app-setting-values.png)

    1. Press **F5** or click the `play run` button to run the code.

        ![Run code](~/assets/images/proactive-scenario/run-code.png)
    
        The corresponding proactive message sample as follows:  

        ![Sample proactive message](~/assets/images/proactive-scenario/proactive-message-sample.png)

    1. Go to App Studio > Select Uninstall the app > install ithe app again.

        ![Install App](~/assets/images/proactive-scenario/install-app.png)   

    1. Go to `http://localhost:3978/api/notify` to get `proactive hello` in chat.    
    1. 1. You receive a welcome message from bot when installation is successful.        

        ![Proactive helo in chat](~/assets/images/proactive-scenario/proactive-helo.png)    

- title: Add Adaptive card to proactive message
  durationInMinutes: 10
  content: |
    1. Stop the debugging process.

        ![Stop debug](~/assets/images/proactive-scenario/stop-debug.png)

    1. Right-click **Dependencies**, select **Manage Nu-get Packages**.

        ![Add Adaptive Card package1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)

    1. Add Adaptive Card package.

        ![Add Adaptive Card package2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)


    1. Replace the existing `BotCallback` code present in `NotifyController.cs` to send Adaptive Card message.     
       
       Following is the corresponding code:        
       
       ```csharp
       private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)
        {
                    AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));

                    card.Body.Add(new AdaptiveTextBlock()
                    {
                        Text = "Proactive Hello",
                        Size = AdaptiveTextSize.ExtraLarge
                    });

                    card.Body.Add(new AdaptiveImage()
                    {
                        Url = new Uri("http://adaptivecards.io/content/cats/1.png")
                    });

                    Attachment attachment = new Attachment()
                    {
                        ContentType = AdaptiveCard.ContentType,
                        Content = card
                    };

                    await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));
        }
       ```

    1. Resolve the errors by adding required `using Adaptive Cards`. Hover over the squiggly red line and select `using AdaptiveCards`.
    
        ![Resolve error](~/assets/images/proactive-scenario/resolve-error.png)  
    
    1. Press **F5** to run the code. 
    1. Go to Teams UI and uninstall the App. Reinstall the same app so that we get the `conversationUpdate` event.
        
        ![Uninstall app](~/assets/images/proactive-scenario/uninstall-app.png)     
    
    1. Go to `http://localhost:3978/api/notify` to get `proactive hello` in Adaptive Card.

- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this?
    
    ![proactive helo in Adaptive Card](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)

- content: |
    You have completed the scenario.
    1. You can send notification on daily basis or request for feedback from user on periodic basis.
    1. Handle [throttling limits](https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/rate-limit) to avoid multiple notifications.
    
   
