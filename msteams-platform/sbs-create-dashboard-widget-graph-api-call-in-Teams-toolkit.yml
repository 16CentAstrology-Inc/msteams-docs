### YamlMime:Tutorial
title: Build a dashboard in Teams
metadata:
  title: Build a dashboard in Teams
  description: Learn how to create a dashboard tab, add a new widget, and implement Graph API.
  audience: Developer
  level: Beginner
  ms.date: 01/06/2023
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/dashboard-teams-toolkit.md
  nextTutorialTitle: Dashboard, widget, and Graph API call in Teams toolkit
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    This step-by-step guide helps you to create a dashboard tab, add a new widget to the dashboard, and implement Graph API. You'll see the following output:

    :::image type="content" source="assets/images/sbs-create-a-new-dashboard/dashboard1.png" alt-text="Screenshot shows the final output of dashboard.":::
    
- title: Prerequisites
  durationInMinutes: 1
  content: |

    | &nbsp; | Install | Access to |
    | --- | --- | --- |    
    | &nbsp; | [NodeJS](https://nodejs.org/en/), fully tested on NodeJS 14, 16. | Back-end JavaScript runtime environment. Use version 14 or 16. |
    | &nbsp; | [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program) | Access to Teams account with the appropriate permissions to install an app. |
    | &nbsp; | [Teams Toolkit Visual Studio Code Extension](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) or [TeamsFx CLI](~/toolkit/TeamsFx-CLI.md) |  A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use 4.0.0 version. |

- title: Create a new dashboard
  content: |

    Teams toolkit supports scaffolding and dashboard creation.

    To create a new dashboard:

     1. From the Teams Toolkit left pane, select **Create a new Teams app**.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-a-new teams-app.png" alt-text="Screenshot shows the selection of create new Teams app":::

     1. Select **Create a new Teams app**. 

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-a-new-teams-app-2.png" alt-text="Screenshot shows the selection of new Teams app.":::

     1. Select **Dashboard tab** from the Teams app section.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard-tab-preview.png" alt-text="Screenshot shows the selection of dashboard tab preview.":::

     1. Select a programming language.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/javascript.png" alt-text="Screenshot shows the selection of programming language.":::

     1. Select a workspace folder.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/default-folder.png" alt-text="Screenshot shows the selection of workspace folder.":::

     1. Enter an application name.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/enter-application-name.png" alt-text="Screenshot shows the selection of application name.":::

        The Teams tab app is created in few seconds.

      In TeamsFX CLI,

      * If you prefer interactive mode, execute `teamsfx` new command, then use the keyboard to go through the same flow as in Visual Studio Code.

      * If you prefer non-interactive mode, enter all required parameters in one command:

        `teamsfx new--interactive false--capabilities "dashboard-tab"--programming-language "TypeScript"--folder "./"--app-name dashboard-cli-001`

        After you successfully created the Teams app, start local debugging via F5 in Visual Studio Code. 
      
        Select **Debug (Microsoft Edge)** or **Debug (Chrome)** option of your preferred browser, you'll see a tab app loaded:

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard.png" alt-text="Screenshot shows user profile information and recent Teams activity.":::

        Teams app also supports different themes, including dark and high contrast themes.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dark-light-theme.png" alt-text="Screenshot shows the contrast themes.":::
       
   
- title: Add a widget to the dashboard
  durationInMinutes: 5
  content: |

     Following are the steps to add a new widget to the dashboard:

     1. [Define a data model](#define-a-data-model)
     2. [Create a data retrieve service](#create-a-data-retrieve-service)
     3. [Create a widget file](#create-a-widget-file)
     4. [Add the widget to the dashboard](#add-the-widget-to-the-dashboard)
    
     ## Define a data model

     1. In Visual Studio Code, under **EXPLORER**, go to tabs > src > models.
     1. Create a **sampleModel.ts** file.
     1. Use the following code and add it to the **sampleModel.ts** file:

        ```
        export interface SampleModel {
         content: string;
         }

        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-model.png" alt-text="Screenshot shows the creation of sampleModel file under the models folder in Visual Studio Code. ":::


     ## Create a data retrieve service

     1. In Visual Studio Code, under **EXPLORER**, go to **tabs > src > data**.
     1. Create a **sampleData.json** file.
     1. Use the following code in the **sampleData.json** file:

        ```
        {
          "content": "Hello world!"
        }
        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-data-json.png" alt-text="Screenshot shows the creation of sampleData.json file under the data folder in Visual Studio Code.":::

     **To retrieve services**:

     1. In Visual Studio Code, under **EXPLORER**, go to EXPLORER> tabs > src > data> services.
     1. Create a **sampleService.ts** file.
     1. Use the following code in the **sampleService.ts**:

        ```
        import { SampleModel } from "../models/sampleModel";
        import SampleData from "../data/SampleData.json";

        export const getSampleData = (): SampleModel => SampleData;
        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/service-retrieve.png" alt-text="Screenshot shows the creation of sampleService.ts file under the service folder in Visual Studio Code.":::

      > [!NOTE]
      > You can implement a service to retrieve data from the backend service or from Microsoft Graph API.
    
     ## Create a widget file

     1. In Visual Studio Code, go to EXPLORER> tabs> src> >views >widgets.
     1. Create a **sampleWidget.ts** file.
     1. Use the following code in the **sampleWidget.tsx** file:

        ```
        import { Button, Text } from "@fluentui/react-components";
        import { Widget } from "../lib/Widget";
        import { SampleModel } from "../../models/sampleModel";
        import { getSampleData } from "../../services/sampleService";

        export class SampleWidget extends Widget<SampleModel> {
        async getData(): Promise<SampleModel> {
        return getSampleData();
        }

        headerContent(): JSX.Element | undefined {
        return <Text>Sample Widget</Text>;
        }

        bodyContent(): JSX.Element | undefined {
        return <div>{this.state.data?content}</div>;
        }

        footerContent(): JSX.Element | undefined {
        return (<Button
          appearance="primary"
          size="medium"
          style={{ width: "fit-content" }}
          onClick={() => {}}
        >
          View Details
        </Button>);
        }
        }
  
        ```
        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-widget.png" alt-text="Screenshot shows the creation of sampleWidget.tsx under the widgets in Visual Studio Code.":::
      
     
     ## Add the widget to the dashboard

      If you want to create a new dashboard, refer to [add a new dashboard](tabs/how-to/dashboard-teams-toolkit.md#add-a-new-dashboard).

      1. In Visual Studio Code, under Explorer> tabs > src > views > dashboards.
      1. Create a **sampleDashboard.tsx** file.
      1. Use the following code in the **sampleDashboard.tsx** file:

        ```
         protected dashboardLayout(): void | JSX. Element {
         return (
         <>
         <ListWidget />
         <ChartWidget />
         <SampleWidget />
         </>);
         } 
        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-dashboard.png" alt-text="Screenshot shows the existing sampleDashboard file in Visual Studio Code."::: 

      If you want the widget in a column, you can use the `oneColumn()` method to define the column layout.
      
      Following is the sample of `oneColumn()` layout:

        ```
  
        protected dashboardLayout(): void | JSX.Element {
        return (
        <>
        <ListWidget />
        <div style={oneColumn()}>
                  <SampleWidget />
                  <ChartWidget />
                </div>
              </>
            );
          }
        ```

      :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/one-column.png" alt-text="Screenshot shows the addition of one column method in dashboard layout.":::

      After adding all the relevant details for creating a widget, Save the respective files.

      You can view the layout successfully changed on the app and view the calendar widget on the dashboard.

      :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/widget-added-to-dashboard.png" alt-text="Screenshot shows the addition of widget to the dashboard with the sample widget highlighted in red. ":::

      You can change the look and style of the widget. For more information, see [customize the widget](dashboard-teams-toolkit.md#customize-the-widget).

- title: Add a new Graph API call
  durationInMinutes: 5
  content: |

      1. Add **single-sign-On** related files by using Teams toolkit.

      1. In Visual Studio Code, select **Teams** in the left pane.
      
      1. Under **DEVELOPMENT**, select **Add features**.

          :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/add-features.png" alt-text="Screenshot shows the selection of added features option.":::

      1. Select **Single Sign-On**.

          :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/single-sign-on.png" alt-text="Screenshot shows the selection of single sign-on option.":::

      1. Move `auth-start.html` file and `auth-end.html` file in the auth> tab> public folder to the tabs> public> folder. These two HTML files are used for auth redirects.

      1. Move **SSO** folder under **auth > tab** folder to tabs> src> sso folder.

      You've added the single-sign-on files to your project, you can call Graph APIs. Refer to [Graph API call](tabs/how-to/dashboard-teams-toolkit.md#graph-api-call).

      1. Select **Join** to join the meeting.

         :::image type="content" source="assets/images/sbs-create-a-new-dashboard/join.png" alt-text="Screenshot shows the Join button highlighted in red.":::

      1. Select **Open**.

         :::image type="content" source="assets/images/sbs-create-a-new-dashboard/join-open.png" alt-text="Screenshot shows the Open option highlighted in red.":::

      1. Select **Join now**.

         :::image type="content" source="assets/images/sbs-create-a-new-dashboard/join-now.png" alt-text="Screenshot shows Join now highlighted in red.":::       

- title: Complete challenge
  durationInMinutes: 5
  content: |

      Did you come up with something like this?

        :::image type="content" source="assets/images/sbs-create-a-new-dashboard/dashboard1.png" alt-text="Screenshot shows the final output of dashboard.":::


- title: Congratulations!
  durationInMinutes: 5
  content: |

    You've completed the tutorial!
