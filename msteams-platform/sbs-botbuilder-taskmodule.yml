### YamlMime:Tutorial
title: Teams task module bot
metadata:
  title: Teams task module bot
  description: In this tutorial, you'll learn to set up Teams task module.
  audience: Developer
  level: Beginner
  ms.date: 01/07/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: task-modules-and-cards/task-modules/task-modules-bots.md
  nextTutorialTitle: Read more on task modules from bots
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Task modules can be invoked from Microsoft Teams bots using hero, thumbnail, or Office 365 Connector buttons on Adaptive Cards or Bot Framework cards. You can interact with the bot by sending message.
    
    **Key features of task modules**
    * Provide better user experience than multiple conversation steps.
    * Demonstrate retrieving input from a user and displaying custom web page content.

    This step-by-step guide helps you to create a sample Azure bot for Teams task module.

    You'll see the following output:

     (Placeholder for image)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)
    * [ngrok](https://ngrok.com/download) latest version or any equivalent tunneling solution

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    * [Microsoft Teams](https://teams.microsoft.com/) with valid account

- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `BotBuilder-Samples` repository to your local GitHub:  

    1. Open [BotBuilder Samples](https://github.com/microsoft/BotBuilder-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       ![Clone repository](~/assets/images/Teams-task-module/clonerepository.png)

    1. Select **Clone**. 

- title: Create and register your bot in AAD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Azure Active Directory (AAD), create a tunnel using ngrok, and add messaging endpoint, perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select **msteams.nonprod.pub.msft.aplt**.
    1. From the **Resource group** dropdown list, select your existing resource group. 
    
        ![Select resource Azure bot](~/assets/images/Teams-task-module/review-plus-create.png) 
    
       You can also create a new resource group (select **Create new** > enter resource name > select **OK**).
    
    1. If you have created a new resource group, select the required location from **New resource group location** dropdown list.

        ![New resource group location](~/assets/images/meetings-side-panel/newresource.png)

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Review + create**.

        ![Create Microsoft App ID](~/assets/images/meeting-token-generator/meeting-token-generator-appidcreate.png)

    1. If the validation passes, select **Create**. 

        It takes a few moments for your bot service to be provisioned. 

    1. Select **Go to resource**. 

        ![Deploy App](~/assets/images/Teams-task-module/botdeployment.png)

        Your Azure bot is created.

        ![Azure bot resource created](~/assets/images/Teams-task-module/bot-page.png)

    **To create client secret**

      Perform the following steps if you have created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

    1. Select **Multitenant** under App Type.

        ![Microsoft App ID](~/assets/images/Teams-task-module/config.png)

    1. In the **Client secrets** section, select **New client secret**. 

        ![New client secret](~/assets/images/meetings-side-panel/newclientsecret.png)
    
       The **Add a client secret** window appears.  

    1. Enter **Description**.
    
    1. Select **Add**.

        ![Add client secret to app](~/assets/images/Teams-task-module/clientsecret.png)

    1. In the **Value** column, select **Copy to clipboard**.

         ![Value of client secret](~/assets/images/Teams-task-module/clientvalue.png)
       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Microsoft Teams channel**

    1. Select **Home**.

        ![Home page](~/assets/images/Teams-task-module/gotohome.png)

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane. 

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

          ![Terms of service](~/assets/images/meetings-side-panel/terms.png)

    1. Select **Save**.

          ![Select Teams](~/assets/images/meetings-side-panel/config-teams.png)   
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=localhost 3978
     ```

    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign-up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

        ![ngrok HTTPS URL](~/assets/images/Teams-task-module/ngrok.png)

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that does not include `https://` in it.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        ![Messaging Endpoint](~/assets/images/Teams-task-module/messaging-endpoint.png)

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.

- title: Update the AAD app registration
  durationInMinutes: 1
  content: |
    **To register your app through the AAD portal**  

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.

       ![App registration](~/assets/images/Teams-task-module/appregister.png)

    1. Under **Manage**, select **Expose an API**.

    1. Select **Set**.

       ![Expose an API](~/assets/images/Teams-task-module/exposeanapi.png)

    1. Set the **Application ID URI** in the form of `api://{AppID}`.

       ![Set link](~/assets/images/Teams-task-module/setlink.png)

    1. Insert the `WebAppDomain` value between `api://` and `/{AppID}`.</br>
        `api://ae57****.ngrok.io/{AppID}`</br>
        
       The following image shows the domain name:
        
        ![App ID URI](~/assets/images/Teams-task-module/appIDuri.png)

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

       ![Select scope](~/assets/images/meetings-side-panel/selectscope.png)
    
    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

        ![Add a scope](~/assets/images/meetings-side-panel/addascope.png)

        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://ae57****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

        ![Scopes](~/assets/images/meetings-side-panel/scopes.png) 
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

        ![Select client application](~/assets/images/meetings-side-panel/selectclientapp.png) 

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

        ![Add client application 1](~/assets/images/meetings-side-panel/addclientapplication1.png) 

       You can enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

        ![Add client application 2](~/assets/images/meetings-side-panel/addclientapplication2.png) 

    1. Select **Authorized scopes**.

        ![Add client application 2](~/assets/images/meetings-side-panel/authorizedscope.png) 

       The following image displays the client IDs:

        ![Client applications](~/assets/images/meetings-side-panel/clientapps.png) 
  
    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to these permissions only if the AAD app is registered in a different tenant.

    1. Select **Add a permission**.

        ![Add permission](~/assets/images/meetings-side-panel/addpermission.png)

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

        By default, **User.Read** is selected.

         ![User](~/assets/images/meetings-side-panel/userpermission.png)

    1. Add the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**

    1. Select **Add permissions**.

         ![Other permissions](~/assets/images/meetings-side-panel/other-permissions.png)

    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app is not granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

            ![Web](~/assets/images/meetings-side-panel/webauth.png)

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://ae57****.ngrok.io/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            ![Auth-end](~/assets/images/meetings-side-panel/authend.png)

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Navigate to **appsettings.json** in cloned repository.

        ![App settings location](~/assets/images/meetings-side-panel/appsettingslocation.png)

    1. Open **appsettings.json** in **Visual Studio 2019** and update the following information:  

         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"BaseUrl"` to the fully qualified domain name.

        ![App settings](~/assets/images/meetings-side-panel/appsettings.png)

    1. Navigate to **manifest.json** in cloned repository.

        ![Manifest file location](~/assets/images/meetings-side-panel/manifestlocation.png)
    
    1. Open **manifest.json** in **Visual Studio 2019** and make the following changes:

         * Replace all occurrences of `<<Your_Domain_URL>>` with your fully qualified domain name.
         * Replace all occurrences of `<<Microsoft-App-ID>>` with your bot's **Microsoft App ID**.

        ![Manifest image2](~/assets/images/meetings-side-panel/manifest-2.png)

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using Visual Studio 2019 or Command line**

    # [Visual Studio 2019](#tab/vs2019)

       1. Launch **Visual Studio 2019**.
       1. Navigate to **File** > **Open** > **Project/Solution**.
    
          ![Open file](~/assets/images/meeting-token-generator/meeting-token-generator-VSopenfile.png)

       1. Select **SidePanel.sln** file from **csharp** folder.

          ![Solution File](~/assets/images/meetings-side-panel/Tokenfileready.png)

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          ![Trust Certificate](~/assets/images/meeting-token-generator/meeting-token-generator-certificate.png)

          A webpage opens with a message **Your bot is ready!**.

          ![App ready](~/assets/images/meetings-side-panel/appisready.png) 

        
    # [Command line](#tab/cli)

    Navigate to **samples > meetings-sidepanel > csharp > Side Panel** in a Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    ![Dotnet](~/assets/images/meetings-side-panel/dotnetruncmd.png)



- content: |
    You've completed the tutorial to get started with a **Side Panel** app!


