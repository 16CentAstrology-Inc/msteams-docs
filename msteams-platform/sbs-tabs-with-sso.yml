### YamlMime:Tutorial
title: SSO for tabs and messaging extension
metadata:
  title: SSO for tabs and messaging extension
  description: In this tutorial, you'll learn to set up SSO for tabs.
  audience: Developer
  level: Beginner
  ms.date: 12/03/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/enable-and-configure-your-app-for-teams-meetings.md
  nextTutorialTitle: Read more to authenticate apps in Teams meeting
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Use single sign-on(SSO) to authorize your Teams tab and messaging extension on desktop or mobile clients. The Single sign-on authentication method in Azure Active Directory (AAD) silently refreshes the authentication token. This reduces the number of time users need to enter their sign-in credentials.

    A bot behaves differently depending on the conversation it's involved in:

    * Bots in channel and group chat conversations require the user to @mention the bot.
    * Bots in a one-to-one conversation don't require an @mention. All messages sent by the user routes to the bot.
    
    This step-by-step guide helps you to create tabs and messaging extensions with SSO authentication enabled. You'll see the following output:


- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * Microsoft Teams with an account (not a guest account)
    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)
    * [ngrok](https://ngrok.com/download) latest version (only for devbox testing) or any equivalent tunneling solution
    * [Microsoft 365 developer account](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) or access to Teams account with the appropriate permissions to install an app

- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `Microsoft-Teams-Samples` repository to your local GitHub:  

    1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       ![Clone repository](~/assets/images/meeting-token-generator/meeting-token-generator-clonerepository.png)

    1. Select **Clone**. 

- title: Create and register your bot in AAD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Azure Active Directory(AAD), create a tunnel using ngrok, and add messaging endpoint, perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret that enables SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select **msteams.nonprod.pub.msft.aplt**.
    1. From the **Resource group** dropdown list, select your existing resource group. You can also create a new resource group (select **Create new** > enter resource name > select **OK**).
    
    1. Select the required location from **New resource group location** dropdown list.

        ![Create resource Azure bot](~/assets/images/meeting-token-generator/meeting-token-generator-review-plus-create.png)

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Review + create**.

        ![Create Microsoft App ID](~/assets/images/meeting-token-generator/meeting-token-generator-appidcreate.png)

    1. If the validation passes, select **Create**.

        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**. 

        ![Deploy App](~/assets/images/meeting-token-generator/meeting-token-generator-botdeployment.png)

        Your Azure bot is created.

        ![Azure bot resource created](~/assets/images/meeting-token-generator/meeting-token-generator-bot-page.png)

    **To create client secret**

      Perform the following steps if you have created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

        ![Microsoft App ID](~/assets/images/meeting-token-generator/meeting-token-generator-config.png)

    1. In the **Client secrets** section, select **New client secret**. 

        ![New client secret](~/assets/images/meeting-token-generator/meeting-token-generator-newclientsecret.png)
    
       The **Add a client secret** window appears.  

    1. Enter **Description**.
    
    1. Select **Add**.

        ![Add client secret to app](~/assets/images/meeting-token-generator/meeting-token-generator-clientsecret.png)

    1. In the **Value** column, select **Copy to clipboard**.

         ![Value of client secret](~/assets/images/meeting-token-generator/meeting-token-generator-clientvalue.png)
       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Microsoft Teams channel**

    1. Select **Home**.

        ![Home page](~/assets/images/meeting-token-generator/meeting-token-generator-gotohome.png)

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane. 

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

          ![Terms of service](~/assets/images/meeting-token-generator/meeting-token-generator-terms.png)

    1. Select **Save**.

          ![Select Teams](~/assets/images/meeting-token-generator/meeting-token-generator-config-teams.png)   
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=localhost 3978
     ```

    > [!NOTE]
    > While creating ngrok tunnel, use `localhost 5000` instead of `3978` if you choose **Command line** to run your app.
    
    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign-up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command.


    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

        ![ngrok HTTPS URL](~/assets/images/meeting-token-generator/meeting-token-generator-ngrok.png)

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that does not include `https://` in it.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        ![Messaging Endpoint](~/assets/images/meeting-token-generator/meeting-token-generator-messaging-endpoint.png)

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.


- title: Configure SSO for your tab 
  durationInMinutes: 1
  content: |
    **To register your app through the AAD portal**  

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.

       ![App registration](~/assets/images/meeting-token-generator/meeting-token-generator-appregister.png)

    1. Under **Manage**, select **Expose an API**.

    1. Select **Set**.

       ![Expose an API](~/assets/images/meeting-token-generator/meeting-token-generator-exposeanapi.png)

    1. Set the **Application ID URI** in the form of `api://botid-{AppID}`.

       ![Set link](~/assets/images/meeting-token-generator/meeting-token-generator-setlink.png)

    1. Insert `botid-` between `api://` and `/{AppID}`.</br>
        
    1. Select **Add a scope**. 
    
    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
   
      | Field | Value |
      | ----- | ----- |
      | Admin consent display name | Teams can access the user’s profile |
      | Admin consent description | Allows Teams to call the app’s web APIs as the current user. |
      | User consent display name | Teams can access your user profile and make requests on your behalf |
      | User consent description | Enable Teams to call this app’s APIs with the same rights that you have. |

    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.
       The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://botid-00000000-0000-0000-0000-000000000000/access_as_user`

        ![Scopes](~/assets/images/meeting-token-generator/meeting-token-generator-scopes.png) 
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

    1. Enter each of the following client IDs and select the authorized scope:</br>

         * `1fec8e78-bce4-4aaf-ab1b-5451cc387264` (Teams mobile or desktop application)
         * `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` (Teams web application)

         ![Add client application](~/assets/images/meeting-token-generator/meeting-token-generator-addclientapplication.png) 

       The following image displays the client IDs:

         ![Client applications](~/assets/images/meeting-token-generator/meeting-token-generator-clientapps.png) 
  
    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to these permissions only if the AAD app is registered in a different tenant.

    1. Select **Add a permission**.

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

        By default, **User.Read** is checked.

         ![User](~/assets/images/meeting-token-generator/meeting-token-generator-userpermission.png)

    1. Add the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**

    1. Select **Add permissions**.

         ![Other permissions](~/assets/images/meeting-token-generator/meeting-token-generator-otherpermissions.png)

    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app is not granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

            ![Web](~/assets/images/meeting-token-generator/meeting-token-generator-webauthentication.png)

         1. Enter **Redirect URIs** as **https://token.botframework.com/.auth/web/redirect** and select **Configure**.
         
             <img src="~/assets/images/bots/redirectURI.png" alt="Configure Redirect URI" width="600"/>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            ![Auth-end](~/assets/images/meeting-token-generator/meeting-token-generator-authend.png)
   
    **To update manifest**

    1. Select **Manifest** from the left pane.
   
    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**. (If you are already in testing your bot in Teams, you must signout this app and signout Teams. Then signin again to see this change).</br>

       ![Update manifest](~/assets/images/bots/update-manifest.png)</br>

    **To set up Bot Service connection**

    1. Go to **Configuration page** > **Add OAuth Connection Settings**.
   
    1. Select **Add OAuth Connection Settings**.
   
    1. In **New Connection Setting**, enter the following details:

        | Field | Value or description |
        | ----- | ----- |
        | Name | Enter name for your new connection setting. You can use the name in the settings of your bot service code. |
        | Service Provider | Select **Azure Active Directory V2**. |
        | Client id | Saved previously as your **Microsoft App ID**. |
        | Client secret | Saved previously as **Value** of the client secret ID. |
        | Token Exchange URL | Use the **Application ID URL** obtained previously while exposing API endpoint. |
        | Tenant ID | Enter **common**. |
        | Scopes | Enter **User.Read** and also add all the **Scopes** required while specifying permissions to downstream APIs. |

        <img src="~/assets/images/bots/botserviceconnection.png" alt="Bot Service connection" width="300"/>

    1. Select **Save**.
   
    1. Select **Apply**.

- title: Set up app settings
  durationInMinutes: 1
  content: |
    1. Navigate to **appsettings.json** in cloned repository.

        ![App settings location](~/assets/images/meeting-token-generator/meeting-token-generator-appsettingslocation.png)

    1. Open **appsettings.json** in **Visual Studio Code** and update the following information:  

         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"DOMAIN-NAME"`` to your ngrok URL.
         * Set `"ConnectionName"` to the name of OAuth connection setting.

             > [!NOTE]
             > The sample works only in the current tenant.

         * Set `"ClientId"` to your bot's **Microsoft App ID**
         * Set `"AppSecret"` to your bot's client secret ID value.
         * Set `"ApplicationIdURI"` in the form of `api://584f****.ngrok.io/botid-{AppID}`</br>.

        ![App settings](~/assets/images/meeting-token-generator/meeting-token-generator-appsettings.png)

- title: Set up manifest file
  durationInMinutes: 1
  content: |
    1. Navigate to **manifest.json** in cloned repository.

        ![Manifest file location](~/assets/images/meeting-token-generator/meeting-token-generator-manifestlocation.png)
    
    1. Open **manifest.json** in **Visual Studio Code** and make the following changes:

         * Replace all occurrences of `[DOMAIN-NAME]` with your ngrok domain name.
         * Replace all occurrences of `[YOUR-MICROSOFT-APP-ID]` with your bot's **Microsoft App ID**.
         * Set `"resource"` in the form of `api://584f****.ngrok.io/botid-{AppID}`</br>.

           ![Manifest image2](~/assets/images/meeting-token-generator/meeting-token-generator-manifest-2.png)

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using Visual Studio 2019 or Command line**

    # [Visual Studio 2019](#tab/vs2019)

       1. Launch **Visual Studio 2019**.
       1. Navigate to **File** > **Open** > **Project/Solution**.
    
          ![Open file](~/assets/images/meeting-token-generator/meeting-token-generator-VSopenfile.png)

       1. Go to **Microsoft-Teams-Samples > samples > app-sso > csharp > App SSO Sample** folder.
       1. Select **App SSO Sample.csproj** file from **csharp** folder.

          ![Token File](~/assets/images/meeting-token-generator/meeting-token-generator-Tokenfileready.png)

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          ![Trust Certificate](~/assets/images/meeting-token-generator/meeting-token-generator-certificate.png)

          A webpage opens with a message **App is ready!**.

          ![App ready](~/assets/images/meeting-token-generator/meeting-token-generator-appisready.png) 

        
    # [Command line](#tab/cli)

    Navigate to the **csharp** folder in a Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    ![Dotnet](~/assets/images/meeting-token-generator/meeting-token-generator-dotnetruncmd.png)
      
- title: Add SSO App to Teams
  durationInMinutes: 1
  content: |
    **To create a Teams meeting and add Meeting Token App**

    1. In your cloned repository, navigate to **csharp > App SSO Sample > TeamsAppManifest**.

    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png
   
    1. Go to **Microsoft teams**.

    1. Select **Store > Manage your app > Publish an app**.
   
    1. Select **Upload a custom app**. 

       ![Upload custom app](~/assets/images/meeting-token-generator/meeting-token-generator-uploadcustomapp.png)

    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

       ![Select zip file](~/assets/images/meeting-token-generator/meeting-token-generator-selectzip.png)

    1. Select **Add**.

       ![Add the app](~/assets/images/meeting-token-generator/meeting-token-generator-addtheapp.png)
    
    1. Send a message to the bot. The bot will perform Single Sign-on and display profile card along with option prompt to view token.
    1. If the bot couldn't perform SSO then it will fallback to normal Authentication method.
    1. Select messaging extension.
    1. Select the sign-in option and enter your credentials.
    1. Open messaging extension and select your bot.
    1. Select your profile under search box.

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ![Your Token](~/assets/images/meeting-token-generator/meeting-token-generator-yourtokennumber.png)

- content: |
    You've completed the tutorial to get started with SSO for tab and messaging extension app.

    See how your application looks like in a real-time scenario:

    ![Real time](~/assets/images/meeting-token-generator/meeting-token-generator-realtimescenario.png)

