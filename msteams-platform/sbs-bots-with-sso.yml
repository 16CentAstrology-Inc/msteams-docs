### YamlMime:Tutorial
title: Teams Bot with Single sign-on
metadata:
  title: Teams Bot with SSO
  description: In this tutorial, you'll learn to set up SSO in a bot for Teams.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Teams bots are conversational bots that run repetitive automated tasks done by the users, such as customer service. The user needs to sign in with their credentials multiple times to perform repetitive tasks. The Single sign-on (SSO) authentication method in Azure Active Directory silently refreshes the authentication token. So users are not required to use their sign-in credentials multiple times. 
    
    A bot behaves differently depending on the conversation it's involved in:

    * Bots in channel and group chat conversations require the user to @mention the bot
    * Bots in a one-to-one conversation don't require an @mention. All messages sent by the user routes to the bot.
    
    This step-by-step guide helps you to create a bot with SSO authentication enabled. You'll see the following output:

    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Prerequisites.
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [Microsoft Teams](https://teams.microsoft.com/) with valid account

      > [!TIP]
      > Ensure the Microsoft Teams account isn't a guest account.

    * [Latest version of ngrok](https://ngrok.com/download) or any equivalent tunneling solution

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)
    * [Microsoft 365 developer account](concepts/build-and-test/prepare-your-o365-tenant.md) or access to Teams account with the appropriate permissions to install an app

- title: Create and register your bot in Azure portal
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot to Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Microsoft Azure portal](https://portal.azure.com/)

    1. Select **Create a resource**

    1. In the search box, enter **Azure bot** 

    1. Select **Enter**

    1. Select **Azure Bot**

        ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**

    1. Enter required bot handle name in **Bot handle**

    1. Select your **Subscription** from the dropdown list
    
    1. Select your **Resource group** from the dropdown list

        :::image type="content" source="~/assets/images/bots/Azurebotcreate.png" alt-text="Create resource Azure bot" border="true":::
        
        You can also create a new resource group (select **Create new** > enter resource name > select **OK**)

    1. If you've created a new resource group, select the required location from **New resource group location** dropdown list
        
        :::image type="content" source="~/assets/images/bots/newresource.png" alt-text="New resource" border="true":::

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected
    
       You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**

    1. Select **Type of App** as **Multi Tenant**

    1. Select **Review + create**

        :::image type="content" source="~/assets/images/bots/Review-Create.png" alt-text="Review Create" border="true":::
    
    1. If the validation passes, select **Create**
  
        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**

        :::image type="content" source="~/assets/images/bots/gotoresource.png" alt-text="Resource" border="true":::

       Your Azure bot is created.

        ![Azure bot resource created](~/assets/images/bots/Azurebotresource.png)

    **To create client secret**

     Perform the following steps if you've created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.
    
    1. Next to **Microsoft App ID**, select **Manage**

          :::image type="content" source="~/assets/images/bots/MicrosoftAppID.png" alt-text="Microsoft App ID" border="true":::

    1. In the **Client secrets** section, select **New client secret** 

          :::image type="content" source="~/assets/images/bots/newclientsecret.png" alt-text="New Client Secret" border="true":::

       The **Add a client secret** window appears.

    1. Enter **Description** 
    
    1. Select **Add**
 
        :::image type="content" source="~/assets/images/bots/addclientsecret.png" alt-text="Add client secret to app" border="true":::

    1. In the **Value** column, select **Copy to clipboard** 

        :::image type="content" source="~/assets/images/bots/valueclientsecret.png" alt-text="Value of client secret" border="true":::

       > [!TIP]
       > Save the **Client secrets** value or app password for future reference
       
    **To add the Teams channel**

    1. Select **Home**

        :::image type="content" source="~/assets/images/bots/homepage.png" alt-text="Home page" border="true":::

    1. Select your bot from **Recent resources**

    1. Select **Channels** in the left pane

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/> 
    
    1. Select the checkbox to accept the **Terms of Service** 
    
    1. Select **Agree**

        :::image type="content" source="~/assets/images/bots/Terms-of-service.png" alt-text="Terms" border="true":::

    1. Select **Apply**

        :::image type="content" source="~/assets/images/bots/apply.png" alt-text="Apply" border="true":::
    
    **To create tunnel for local web server**

         Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

       ```bash
       ngrok http -host-header=localhost 3978
       ```
       > [!TIP]
       > If you encounter **ERR_NGROK_4018**, follow the steps, as displayed in the command prompt to sign up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL

        :::image type="content" source="~/assets/images/bots/ngrokURL.png" alt-text="ngrok HTTPS URL" border="true":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it

    1. In **Settings** for the Azure bot that you created, select **Configuration**

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**

        :::image type="content" source="~/assets/images/bots/messagingURL.png" alt-text="Messaging endpoint" border="true":::

    1. Select **Apply**

        You have successfully set up a bot in Azure Bot Service.

- title: Configure SSO for your bot
  durationInMinutes: 5
  content: |
    **To add Redirect URI to the Azure bot resource**

    1. Select **Manage**

         :::image type="content" source="~/assets/images/bots/select-manage.png" alt-text="Manage app ID" border="true":::

    1. From the left pane, select **Authentication**

    1. In **Platform configurations**, select **Add a platform**

        :::image type="content" source="~/assets/images/bots/addaplatform.png" alt-text="Add a Platform" border="true":::

    1. Select **Web**

    1. Enter **Redirect URIs** as `https://token.botframework.com/.auth/web/redirect` 
    
    1. Select **Configure**

        :::image type="content" source="~/assets/images/bots/redirectURI.png" alt-text="Configure Redirect URI" border="true":::
 
        The Redirect URI is added to the Azure bot resource.

        :::image type="content" source="~/assets/images/bots/redirectURIadded.png" alt-text="Redirect URI added to bot resource" border="true":::

    **To expose API endpoint**

    1. From the left pane, select **Expose an API**

    1. Select **Set**

        :::image type="content" source="~/assets/images/bots/appidURI.png" alt-text="Application ID URI" border="true":::

    1. Use the Application ID URI shown and append **api://botid-** at the beginning of the URI

    1. Select **Save**

        :::image type="content" source="~/assets/images/bots/exposeAPI.png" alt-text="Expose an API" border="true":::
    
       > [!TIP]
       > Save the **Application ID URI** for future reference.

    1. Select **Add a scope**

        :::image type="content" source="~/assets/images/bots/Addascope.png" alt-text="Expose an API" border="true":::

    1. In **Scope name**, enter **access_as_user**

    1. In the panel that appears, enter `access_as_user` as the **Scope Name**

    1. Set **Who can consent?** to `Admins and users`

    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as you have` as **User consent description**.

    1. Ensure that **State** is set to **Enabled**

    1. Select **Add scope** to save

        :::image type="content" source="~/assets/images/bots/addscope.png" alt-text="Add a scope to app" border="true":::

        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://your ngrok/botid-00000000-0000-0000-0000-000000000000/access_as_user`

          :::image type="content" source="~/assets/images/bots/ExposeAPIandaddscope.png" alt-text="API exposed and scope added" border="true":::

    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application
    
    1. Select **Add a client application**

        :::image type="content" source="~/assets/images/bots/addaclientapplication.png" alt-text="Add a Client Application" border="true":::

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams desktop application

        :::image type="content" source="~/assets/images/bots/addclientapplication1.png" alt-text="Add client application to app" border="true":::
       
       Enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application
         
         :::image type="content" source="~/assets/images/bots/addclientapplication2.png" alt-text="Add client application to app" border="true":::    
    
    1. Select **Authorized scopes**

        :::image type="content" source="~/assets/images/bots/authorizedscope.png" alt-text="Authorized Scope" border="true":::

        The following image displays the **Client Id**:

          :::image type="content" source="~/assets/images/bots/clientapps.png" alt-text="Client Apps" border="true":::

    1. In the left panel, select **API Permissions**

       > [!NOTE]
       > Users need to consent to the API permissions only if the AAD app is registered in a different tenant.

    1. Select **Add a permission**

        :::image type="content" source="~/assets/images/bots/configure-permission.png" alt-text="API user permissions" border="true":::

    1. Select **Microsoft Graph**

    1. Select **Delegated permissions**

    1. Select the following permissions:</br>
         * **User.Read**

    1. Select **Add permissions**

        :::image type="content" source="~/assets/images/bots/userread.png" alt-text="User Read" border="true":::

    1. From the left panel, select **Authentication** to set a redirect URI

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**

         1. Select **Web**

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://your ngrok/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
              :::image type="content" source="~/assets/images/bots/authenticationcheckboxes.png" alt-text="Authentication check boxes for the app" border="true":::

         1. Select **Save**

    **To update manifest**

    1. From the left pane, select **Manifest**
    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**
    
       > [!NOTE]
       > If you're already in testing your bot in Teams, you must sign out this app and sign out Teams. Then sign in again to see this change.</br>
        
        ![Update manifest](~/assets/images/bots/update-manifest.png)</br>

    **To set up Bot service connection**

    1. In **Configuration page**, select **Add OAuth Connection Settings**

    1. Select **Add OAuth Connection Settings**

    1. In **New Connection Setting**, enter the following details:

        | Field | Value or description |
        | ----- | ----- |
        | Name | Enter name for your new connection setting. You can use the name in the settings of your bot service code. |
        | Service Provider | Select **Azure Active Directory V2**. |
        | Client id | Saved previously as your **Microsoft App ID**. |
        | Client secret | Saved previously as **Value** of the client secret ID. |
        | Token Exchange URL | Use the **Application ID URL** obtained previously while exposing API endpoint. |
        | Tenant ID | Enter **common**. |
        | Scopes | Enter **User.Read** and also add all the **Scopes** required while specifying permissions to downstream APIs. |

    1. Select **Save**

        :::image type="content" source="~/assets/images/bots/botserviceconnection.png" alt-text="Bot Service connection" border="true":::

    1. Select **Apply**

- title: Configure and run your bot sample
  durationInMinutes: 1
  content: |
    Configure the bot sample to understand how to authenticate conversational bot in Microsoft Teams.

    **To configure and run your bot sample**

    1. Open Visual Studio

    1. Select **Clone a repository**

    1. In the **Repository location**, enter `https://github.com/OfficeDev/Microsoft-Teams-Samples.git`. Ensure that you note the **Path** where the repository is cloned
    
    1. Navigate to **File** > **Open** > **Project/Solution**

        :::image type="content" source="~/assets/images/bots/project-solution.png" alt-text="Bot Service connection" border="true":::

    1. Select **BotSSOCSharp.csproj** file from **csharp_dotnetcore** folder

        :::image type="content" source="~/assets/images/bots/filepath.png" alt-text="File Path" border="true":::

    1. Open the **appsettings.json** file

    1. Update the **appsettings.json** configuration for the bot to use the `MicrosoftAppId` and `MicrosoftAppPassword`. Use the OAuth connection name as the **Connection Name**

        > [!NOTE]
        > You can obtain the `MicrosoftAppId` from the bot's Configuration page. The `MicrosoftAppPassword` is the Value for client secret ID that you saved previously.

        ![Appsettings json](~/assets/images/bots/appsettingsjson.png)

    1. Select **F5**  to run the project

        :::image type="content" source="~/assets/images/bots/certificate.png" alt-text="Ca" border="true":::

    1. Select **Yes** if the following dialog appears

       A webpage opens with a message **Bot is Ready**

        :::image type="content" source="~/assets/images/bots/yourbot.png" alt-text="Ca" border="true":::
        
        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	In **Name**, enter `nuget.org` and in **Source**, enter `https://api.nuget.org/v3/index.json`.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>


- title: Configure and run the Teams app
  durationInMinutes: 2
  content: |
    1. In Visual Studio, open **appPackage** folder.

    1. Open the **manifest.json** file.

    1. Replace all occurances of '{TODO: MicrosoftAppId}' with your bot's **Microsoft App ID**.
    
    1. In your cloned repository, Navigate to **bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage** folder.
    
    1. Create a .zip with the following files, that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

        :::image type="content" source="~/assets/images/bots/manifest.png" alt-text="Ca" border="true":::

    1. Go to Teams.
    1. Select **Store**
    1. Select **Manage your apps**.
    1. Select **Upload a custom app** and open `manifest.zip`.
    1. Select **Add** to add the conversation bot to your chat.

        You can interact with this bot by sending it a message. The Bot exchanges an SSO token and makes a call to the Graph API on your behalf and returns the results. It keeps you signed in unless you send a message to **sign out**.

    1. Send a message to the bot. The conversation bot asks for permissions for the first time.

        ![Permissions to bot](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

    1. Select **Continue** to accept the permissions.

    1. Select **Accept** for **Permissions requested**.

        ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
    
- content: |
    You've completed the tutorial to get started with SSO in a bot for Teams using the Bot Framework.

