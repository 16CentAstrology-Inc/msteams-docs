### YamlMime:Tutorial
title: Teams Bot with Single sign-on (SSO)
metadata:
  title: Teams Bot with SSO
  description: In this tutorial, you'll learn to set up SSO in a bot for Teams.
  audience: Developer
  level: Beginner
  ms.date: 08/06/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/conversations/subscribe-to-conversation-events.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: |
    A bot referred to as chatbot or conversational bot runs simple and repetitive automated tasks. These tasks are performed by the users, such as customer service. A bot behaves differently depending on the conversation it's involved in:

    * Bots in channel and group chat conversations require the user to @mention the bot to invoke it in a channel.
    * Bots in a one-to-one conversation don't require an @mention. All messages sent by the user routes to the bot.
    
    The step-by-step guide helps you to enable Single sign-on (SSO) in a bot using Bot Framework. Single sign-on authentication in Azure Active Directory (AAD) silently refreshes the authentication token. SSO reduces the number of times users need to enter their sign in credentials.
    
    The guide helps you to use Bot Framework support for OAuth SSO in your bot. The bot is developed to authenticate users to various identity providers, such as Azure Active Directory (AAD) and GitHub. The step-by-step guide provides steps to enable Bot SSO, which helps to set up Azure Bot Services. You'll see the following output:

    ![Signed in to the conversation bot](~/assets/images/bots/loggedin.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    The prerequisites for the step-by-step guide are as follows:    

    * Microsoft Teams with an account (not a guest account)
    * [Node.js](https://nodejs.org/en/)
    * [ngrok](https://ngrok.com/) or equivalent tunneling solution
    * Visual Studio 2019 or the latest version
    * [Microsoft 365 developer account](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) or access to Teams account with the appropriate permissions to install an app

- title: Set up bot in Azure Bot Service
  durationInMinutes: 5
  content: |
    To set up bot in Azure Bot Service, you must register bot with Azure Bot Service when you develop and host it in Azure. To do this, you must:

    * Use ngrok to create a tunnel to your web server's endpoints.
    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret that enables SSO authentication of the bot.
    * Expose API endpoint to specify the location from where the resources can be accessed.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Add messaging endpoint to the ngrok tunnel you created.

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

    ```bash
    ngrok http -host-header=rewrite 3978
    ```

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource** under **Azure services**.
    1. Enter **Azure bot** in search box and select the Enter key.
    1. Select **Azure Bot**.

        ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. Select required subscription from **Subscription** dropdown list.
    1. Select required resource group from **Resource group** dropdown list.
    1. If you have created a new resource, select required location from **New resource group location** dropdown list.

        > [!NOTE]
        > In the Microsoft App ID section, **Create new Microsoft App ID** is already selected. You can select **Use existing app registration**, enter **Existing app id**, and enter **Existing app password**.

    1. Select **Review + create**.

        ![Create resource Azure bot](~/assets/images/bots/Azurebotcreate.png)

    1. If the validation passes, select **Create**.

        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**. The bot and the related resources are listed in the resource group.
    1. Select **Download from GitHub** to download the SDK and build your bot with the Bot Framework SDK.

        ![Build Bot Framework SDK](~/assets/images/bots/buildfromgithub.png)

    **To create client secret**

    1. Go back to the Azure portal and select the Azure bot resource that you created.
    1. Select **Configuration** under **Settings**.
    1. Select **Manage** for the **Microsoft App ID**.
    1. Select **New client secret** under the **Client secrets** section.

        ![Add client secret to app](~/assets/images/bots/addclientsecret.png)  

    1. Enter **Description** and select **Add**.

    1. Select **Copy to clipboard** for **Value** and save the Client secret for future reference.

    **To add Redirect URL to the Azure bot resource**

    1. Select **Authentication** from the left pane of your bot resource.
    1. Select **Add a platform** under **Platform configurations**.
    1. Select **Web**.

    1. Enter **Redirect URIs** as **https://token.botframework.com/.auth/web/redirect** and select **Configure**.

        ![Configure Redirect URI](~/assets/images/bots/redirectURI.png)

    **To expose API endpoint**

    1. Select **Expose an API** from the left pane.
    1. Select **Set** for the Application ID URI.
    1. Use the Application ID shown and add **api://botid-** at the beginning of the URI.

        ![Expose an API](~/assets/images/bots/exposeAPI.png)

    1. Select **Save**.
    1. Select **Add a scope**.
    1. Enter **access_as_user** as the **Scope name**.
    1. Select **Admins and users** for **Who can consent?**.
    1. Enter the following values or appropriate values in the boxes:

        | Field | Value |
        | ----- | ----- |
        | Admin consent display name | Teams can access the user’s profile |
        | Admin consent description | Allows Teams to call the app’s web APIs as the current user. |
        | User consent display name | Teams can access your user profile and make requests on your behalf |
        | User consent description | Enable Teams to call this app’s APIs with the same rights that you have. |

    1. Ensure that **State** is set to **Enabled**.

        ![Add a scope to app](~/assets/images/bots/addscope.png)

    1. Select **Add scope**. The Scope name automatically matches the Application ID URI, with **/access_as_user** added to the end.

    **To add the Microsoft Teams channel**

    1. Go to **Home** and open your bot.
    1. Select **Channels** in the left pane and select **Teams**.

        ![Connect to channels](~/assets/images/bots/connecttochannels.png)

    1. Select **Save**.
    1. Select **I agree to the Microsoft Channel Publication Terms and the Microsoft Privacy Statements for my deployment to the Microsoft Teams channel.** and select **Agree**.

    **To add messaging endpoint**

    1. Select **Configuration** under **Settings** for the Azure bot that you created.
    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.
    1. Select **Apply**.

    
- title: Set up Bot Service connection
  durationInMinutes: 1
  content: |
    When you register a bot in Azure, it creates an Active Directory (AD) registration application. This application has an app ID `MicrosoftAppId` and a client secret `MicrosoftAppPassword`. You use these values for bot configuration and also generate an authentication connection. You add this connection to the bot resource you created. With Azure Bot Service’s OAuth, it is easier for your Teams bot to sign in your users and access external data providers.

    **To configure Bot Service connection**

    1. Select **Add OAuth Connection Settings**.
    1. Enter the following details in **New Connection Setting**:
        - Enter **Name** for your new connection setting. You can use the name in the settings of your bot service code.
        - Select **Azure Active Directory V2** from **Service Provider**.
        - Enter **Client id** and **Client secret** saved previously as your Microsoft App ID and Value for Client secret respectively.

            > [!NOTE]
            > You can obtain the Microsoft App ID from the bot's Configuration page.

        - For the **Token Exchange URL**, use the **Application ID URL** obtained previously while exposing API endpoint and add **api://botid-** at the beginning of the URL.
        - Enter **common** as the **Tenant ID**.
        - Add all the **Scopes** required while specifying permissions to downstream APIs.

            ![Bot Service connection](~/assets/images/bots/botserviceconnection.png)

    1. Select **Save**.
    1. Select **Apply**.

- title: Configure and run your bot sample
  durationInMinutes: 1
  content: |
    Configure the bot sample to understand how to use authentication for a bot running in Microsoft Teams.

    **To configure and run your bot sample**

    1. Clone the repository with the following command or using Visual Studio 2019.

        ```bash
        git clone https://github.com/OfficeDev/Microsoft-Teams-Samples.git
        ```

    1. In Visual Studio, select **File -> Open -> Project/Solution**.
    1. Go to the **samples/bot-conversation-sso-quickstart/csharp_dotnetcore** folder of **Microsoft-Teams-Samples** repository.
    1. Open the **BotSSOCSharp.csproj** file.
    1. Open the **appsettings.json** file.
    1. Update the **appsettings.json** configuration for the bot to use the `MicrosoftAppId` and `MicrosoftAppPassword`. Use the OAuth connection name as the **Connection Name**.

        > [!NOTE]
        > You can obtain the `MicrosoftAppId` from the bot's Configuration page. The `MicrosoftAppPassword` is the Value for Client secret that you saved previously.

    1. Select the **F5** key to run this project.

- title: Configure and run the Teams app
  durationInMinutes: 2
  content: |
    The most comprehensive way to test your bot is by creating an app package and uploading it to Teams. This method is the only way to test the full functionality available to your bot, across all scopes.
    
    Configure and run the Teams app either by:

    * Uploading the **manifest.zip** file.
    * Using **App Studio**.

    Edit the **manifest.json** file in the **appPackage/** folder. Replace everywhere you see the place holder string **{TODO: MicrosoftAppId}** with your Microsoft App ID.
    
    **To run the Teams app by uploading the manifest.zip file**

    1. Zip the contents of the **appPackage/** folder to create a **manifest.zip**.
    1. Upload **manifest.zip** to Teams by selecting **Store**, **Manage your apps**, and **Upload a custom app**.
    1. Select **Add** to add the conversation bot to your chat.

        You can interact with this bot by sending it a message. The Bot exchanges an SSO token and makes a call to the Graph API on your behalf and returns the results. It keeps you signed in unless you send a message to **logout**.

    1. Send a message to the bot.

        ![Authentication bot](~/assets/images/bots/authenticationbotcreated.png)

        The conversation bot asks for permissions for the first time.

        ![Permissions to bot](~/assets/images/bots/permissions.png)

    1. Select **Continue** to accept the permissions.
    1. Select **Accept** for **Permissions requested**.

    **To run the Teams app using App Studio**

    1. In Teams, open your app's zip file in **App Studio's** manifest editor.
    1. Select **Bots** under **Capabilities**.
    1. Check the **Bot ID**.
    1. Select **Domains and permissions** under **Finish**.
    1. Check the **AAD App ID**, which is the Microsoft App ID and **Single-Sign-On** includes the Microsoft App ID with **api://botid-** added to it.
    1. Select **Test and distribute** under **Finish** and select **Install**.
    1. Select **Add** to add the conversation bot to your chat.

        You can interact with this bot by sending it a message. It keeps you signed in unless you send a message to **logout**. The conversation bot asks for permissions for the first time.

    1. Send a message to the bot.
    1. Select **Continue** to accept the permissions.
    1. Select **Accept** for **Permissions requested**.

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ![Signed in to the conversation bot](~/assets/images/bots/loggedin.png)
    
- content: |
    You've completed the tutorial to get started with SSO in a bot for Microsoft Teams using the Bot Framework.

    For further reading:
    - [Bot Framework documentation](https://docs.botframework.com/)
    - [Azure Bot Service introduction](/azure/bot-service/?view=azure-bot-service-4.0)
    - [Channels and Bot Connector Service](/azure/bot-service/bot-concepts?view=azure-bot-service-4.0)
