### YamlMime:Tutorial
title: Teams Bot with SSO
metadata:
  title: Teams Bot with SSO
  description: In this tutorial, you'll learn to setup SSO in a bot for Teams.
  audience: Developer
  level: Beginner
  ms.date: 08/06/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Numbers in C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: |
    This tutorial teaches you how to get started with SSO in a bot for Microsoft Teams using the Bot Framework. It contains a series of lessons that begin with setting up bot SSO. These lessons teach you how to use the Bot Framework support for OAuth SSO in your bot. It is different in Teams than other channels. An invoke activity is sent to the bot rather than the event activity used by other channels. This invoke activity must be forwarded to the dialog if the OAuthPrompt is being used. This is done by subclassing the ActivityHandler. The bot authentication capabilities are used in Azure Bot Service, to develop a bot that authenticates users to various identity providers, such as Azure Active Directory (AAD), GitHub, and Uber. The OAuth token is then used to make basic Microsoft Graph queries.
- title: Prerequisites
  durationInMinutes: 2
  content: |
    Ensure that you install the following:    

    * Microsoft Teams is installed and you have an account (not a guest account).
    * [Node.js](https://nodejs.org/en/).
    * [ngrok](https://ngrok.com/) or equivalent tunneling solution.
    * [M365 developer account](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) or access to a Teams account with the appropriate permissions to install an app.

- title: Create and configure AAD app
  durationInMinutes: 5
  content: |
    This section shows how to setup AAD and Azure Bot Services, which are the steps to enable Bot SSO.

    **To create AAD app for SSO**

    1. Go to [Azure App Registration](https://ms.portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade).

        ![Azure app registration](~/assets/images/bots/appregistration.png)
    
    1. Select **New registration** in the upper left corner.
    1. Enter **Name** and select **Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)**.

        ![Registration details](~/assets/images/bots/registerapp.png)

    1. Enter **Redirect URI** as **https://token.botframework.com/.auth/web/redirect** and select **Register**.

        ![AAD app](~/assets/images/bots/aadapp.png)

        Save the Application ID for future reference.

    **To create Client secret**

    1. Select **Certificates & secrets** from the left pane.
    1. Select **New client secret** under the **Client secrets** section.

        ![Add client secret to app](~/assets/images/bots/addclientsecret.png)  

    1. Enter **Description** and select **Add**.

        Save the Value and Secret ID for future reference.

    **To expose API endpoint**

    1. Select **Expose an API** from the left pane.
    1. Select **Set** for the Application ID URI, use the Application ID you saved previously, and select **Save**.
    1. Select **Add a scope**.
    1. Enter **access_as_user** as the **Scope name**.
    1. Select **Admins and users** for **Who can consent?**.
    1. Enter the following values or appropriate values in the boxes:

        - Admin consent title: Teams can access the user’s profile
        - Admin consent description: Allows Teams to call the app’s web APIs as the current user.
        - User consent title: Teams can access your user profile and make requests on your behalf
        - User consent description: Enable Teams to call this app’s APIs with the same rights that you have.

    1. Ensure that **State** is set to **Enabled**.

        ![Add a scope to app](~/assets/images/bots/addscope.png)

    1. Select **Add scope**. The Scope name automatically matches the Application ID URI, with **/access_as_user** added to the end.

    To authorize client applications add the following IDs as **Authorized client applications** and also select the check box for **Authorized scopes**:
        - 1fec8e78-bce4-4aaf-ab1b-5451cc387264 (Teams mobile/desktop application)
        - 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 (Teams web application)

        ![Add client application to app](~/assets/images/bots/addclientapplication.png)

    **To add any necessary API permissions for downstream calls**

    1. Select **API permissions** from the left pane.
    1. Add any user delegated permissions that your app requires to downstream APIs, for example, User.Read.

        ![API user permissions](~/assets/images/bots/APIpermissions.png)

    **To enable implicit grant**
    
    1. Select **Authentication** from the left pane.
    1. Select the **Access tokens** and **ID tokens** checkboxes.

        ![Authentication check boxes for the app](~/assets/images/bots/authenticationcheckboxes.png)

    1. Select **Save** to save the changes.

    **To make changes in manifest**

    1. Select **Manifest** from the left pane.
    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**. (If you are already in testing your bot in Teams, you must signout this app and signout Teams. Then signin again to see this change).
    

- title: Setup bot in Azure Bot Service
  durationInMinutes: 5
  content: |
    Run the following command in ngrok:

    ```bash
    ngrok http -host-header=rewrite 3978
    ```

    **To create Bot Channels registration resource in Azure**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource** under **Azure services**.
    1. In the search box, enter **bot** and select the **Enter** key.
    1. Select the **Azure Bot card**.

        ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter a bot handle name in **Bot handle**.
    1. Select a subscription from the **Subscription** dropdown list.
    1. Select a resource group from the **Resource group** dropdown list.

        > [!NOTE]
        > In the Microsoft App ID section, **Create new Microsoft App ID** is already selected. You can select **Use existing app registration**, enter **Existing app id**, and enter **Existing app password**.

    1. Select **Review + create**.
    1. If the validation passes, select **Create**.
    1. Select **Go to resource group**. The bot and the related Azure Key Vault resources are listed in the resource group you selected.
    1. Select **Get the SDK from Github** to build your bot with the Bot Framework SDK.
    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages:**.
    1. In **Microsoft App ID and password**, select **Create New**
    1. Enter the **AppId** and **Client secret** you saved previously.
    1. Select **Create**.
        
        It takes a few moments for your bot service to be provisioned.

    1. After you see a notification indicating the validation process is complete, go to **Home > Bot Services** to find your bot.
    1. If required, refresh the page to see your bot listed.
    1. To add the Microsoft Teams channel, open the bot in the [Azure portal](https://portal.azure.com/), select **Channels** in the left pane, and then select **Teams**.
    1. Select **Save**.
    1. Go to the **Channels** page and select **Get bot embed code**.
    1. Copy the https part of the code that is shown in the Get bot embed code dialog. For example, **https://teams.microsoft.com/l/chat/0/0?users=28:b8a22302e-9303-4e54-b348-343232**.
    1. In the browser, paste this address and choose the Microsoft Teams app that you use to add the bot to Teams.

        You can see the bot listed as a contact that you can send messages to and receives messages from in Microsoft Teams.

- title: Setup Bot Service connection
  durationInMinutes: 5
  content: |
    1. In the Azure portal, go back to **Bot Channels Registration**.
    1. Select **Settings** from the left pane and select **Add Setting** under the **OAuth Connection Settings** section.
    1. Enter the following details in **Connection Setting**:
        - Enter **Name** for your new Connection setting. This is the name referenced in the settings of your bot service code.
        - Select **Azure Active Directory V2** from **Service Provider**.
        - Enter **Client id** and **Client secret** saved previously.
        - For the **Token Exchange URL**, use the **Application ID URL** obtained previously.
        - Enter **common** as the **Tenant ID**.
        - Add all the scopes configured while specifying permissions previously to downstream APIs.

    1. Select **Save**.

- title: Configure bot sample
  durationInMinutes: 5
  content: |
    Update the **appsettings.json** configuration for the bot to use the Microsoft App Id and App Password generated previously from the Bot Framework registration.

- title: Run your bot sample
  durationInMinutes: 5
  content: |
    1. Clone the repository by using the following command:

    ```bash
    git clone https://github.com/OfficeDev/Microsoft-Teams-Samples.git
    ```

    1. If you are using Visual Studio, select **File -> Open -> Project/Solution**.
    1. Go to the **samples/bot-conversation-sso-quickstart/csharp_dotnetcore** folder.
    1. Select the **TeamsAuth.csproj** file.
    1. Select the **F5** key to run this project.


- title: Configure and run the Teams app
  durationInMinutes: 5
  content: |
    Using App Studio

    1. In Teams, open your app in App Studio's manifest editor.
    1. Select **Bots** under **Capabilities**.
    1. Select **Set up** and select **Existing bot**.
    1. In the **Bot ID**, enter your **AAD app registration ID** that you saved previously.
    1. Select the check boxes for any scopes that you require to install the bot.
    1. Select **Save**.
    1. Select **Domains and permissions** under **Finish**.
    1. Enter the ID used from the previous step in **AAD App ID**, add "api://botid-" to it, and enter the URI in **Single-Sign-On**.
    1. Select **Test and distribute** under **Finish** and select **Install**.

    By manually updating the **manifest.json** file

    1. Edit the **manifest.json** file in the **appPackage/** folder and replace everywhere you see the place holder string {TODO: MicrosoftAppId} with your MicrosoftAppId used previously. The ConnectionName is the name of OAuth Connection you configured previously.
    1. Zip the contents of the **appPackage/** folder to create a **manifest.zip**.
    1. Upload **manifest.zip** to Teams by selecting **Manage your apps** and **Upload a custom app**.

    You can interact with this bot by sending it a message. The bot responds by asking for your consent, the Bot exchanges an SSO token and makes a call to the Graph API on your behalf and returns the results. It keeps you signed in unless you send a message to **logout**.

- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this?

    
- content: |
    You've completed the tutorial to get started with SSO in a bot for Microsoft Teams using the Bot Framework.

    For further reading:
    - [Bot Framework documentation](https://docs.botframework.com/)
    - [Azure Bot Service introduction](/azure/bot-service/?view=azure-bot-service-4.0)
    - [Channels and Bot Connector Service](/azure/bot-service/bot-concepts?view=azure-bot-service-4.0)
