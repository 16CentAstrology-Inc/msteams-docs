### YamlMime:Tutorial
title: Teams Bot with SSO
metadata:
  title: Teams Bot with SSO
  description: In this tutorial, you'll learn .
  audience: Developer
  level: Beginner
  ms.date: 08/06/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Numbers in C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: |
    This tutorial teaches you how to get started with SSO in a bot for Microsoft Teams using the Bot Framework. It contains a series of lessons that begin with setting up bot SSO. These lessons teach you how to use the Bot Framework support for OAuth SSO in your bot. It is different in Teams than other channels. An invoke activity is sent to the bot rather than the event activity used by other channels. This invoke activity must be forwarded to the dialog if the OAuthPrompt is being used. This is done by subclassing the ActivityHandler. The bot authentication capabilities are used in Azure Bot Service, to develop a bot that authenticates users to various identity providers, such as Azure Active Directory (AAD), GitHub, and Uber. The OAuth token is then used to make basic Microsoft Graph queries.
- title: Prerequisites
  durationInMinutes: 2
  content: |
    Ensure that you install the following:    

    * Microsoft Teams is installed and you have an account (not a guest account).
    * [Node.js](https://nodejs.org/en/).
    * [ngrok](https://ngrok.com/) or equivalent tunneling solution.
    * [M365 developer account](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) or access to a Teams account with the appropriate permissions to install an app.

- title: Setup for bot SSO
  durationInMinutes: 5
  content: |
    This section shows how to setup AAD and Azure Bot Services, which are the steps to enable Bot SSO.

    Create and configure AAD app
    Create AAD app for SSO

    1. Go to [Azure App Registration](https://ms.portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade).

        ![Azure app registration](~/assets/images/bots/appregistration.png)
    
    1. Select **New Registration** in the upper left corner.
    1. Enter **Name** and select **Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)**.

        ![Registration details](~/assets/images/bots/registerapp.png)

    1. Enter **Redirect URI** as **https://token.botframework.com/.auth/web/redirect** and select **Register**.

        ![AAD app](~/assets/images/bots/aadapp.png)   

        Save the Application ID for future reference.

    Create Client secret

    1. Select **Certificates & secrets** from the left pane.
    1. Select **New client secret** under the **Client secrets** section.

        ![Add client secret to app](~/assets/images/bots/addclientsecret.png)  

    1. Enter **Description** and select **Add**.

        Save the Value and Secret ID for future reference.

    Expose API endpoint

    1. Select **Expose an API** from the left pane.
    1. Select **Set** for the Application ID URI, use the Application ID you saved previously, and select **Save**.
    1. Select **Add a scope**.
    1. Enter **access_as_user** as the **Scope name**.
    1. Select **Admins and users** for **Who can consent?**.
    1. Enter the following values or appropriate values in the boxes:

        - Admin consent title: Teams can access the user’s profile
        - Admin consent description: Allows Teams to call the app’s web APIs as the current user.
        - User consent title: Teams can access your user profile and make requests on your behalf
        - User consent description: Enable Teams to call this app’s APIs with the same rights that you have.

    1. Ensure that **State** is set to **Enabled**.

        ![Add a scope to app](~/assets/images/bots/addscope.png)

    1. Select **Add scope**. The Scope name automatically matches the Application ID URI, with **/access_as_user** added to the end.

    Authorize client applications

    1. Add the following IDs as **Authorized client applications** and also select the check box for **Authorized scopes**:
        - 1fec8e78-bce4-4aaf-ab1b-5451cc387264 (Teams mobile/desktop application)
        - 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 (Teams web application)

        ![Add client application to app](~/assets/images/bots/addclientapplication.png)

    Add any necessary API permissions for downstream calls

    1. Select **API permissions** from the left pane.
    1. Add any user delegated permissions that your app requires to downstream APIs, for example, User.Read.

        ![API user permissions](~/assets/images/bots/APIpermissions.png)

    Enable implicit grant
    
    1. Select **Authentication** from the left pane.
    1. Select the **Access tokens** and **ID tokens** checkboxes.

        ![Authentication check boxes for the app](~/assets/images/bots/authenticationcheckboxes.png)

    1. Select **Save** to save the changes.

    Changes in manifest

    1. Select **Manifest** from the left pane.
    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**. (If you are already in testing your bot in Teams, you must signout this app and signout Teams. Then signin again to see this change).
    
    

- title: Work with strings
  durationInMinutes: 5
  content: |
    Your last edit was our first look at what you can do with strings. Let's explore more.

    You're not limited to a single variable between the curly braces. Try this:

    ```csharp
    string firstFriend = "Maria";
    string secondFriend = "Sage";
    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");
    ```

    As you explore more with strings, you'll find that strings are more than a collection of letters. You can find the length of a string using `Length`. `Length` is a **property** of a string and it returns the number of characters in that string. Add the following code at the bottom of the interactive window:

    ```csharp
    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");
    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");
    ```

    > [!TIP]
    > This is a good time to explore on your own. You've learned that `Console.WriteLine()`
    > writes text to the screen. You've learned how to declare variables and
    > concatenate strings together. Experiment in the interactive window. The window has a feature called *IntelliSense* that
    > makes suggestions for what you can do. Type a `.` after the `d` in `firstFriend`. You'll see a list of suggestions for properties
    > and methods you can use.

- title: Do more with strings
  durationInMinutes: 5
  content: |
    You've been using a *method*, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, to print messages. A *method* is a block of code that implements some action. It has a name, so you can access it.

    Suppose your strings have leading or trailing spaces that you don't want to display. You want to **trim** the spaces from the strings.
    The <xref:System.String.Trim%2A> method and related methods <xref:System.String.TrimStart%2A> and <xref:System.String.TrimEnd%2A> do that work. You can just use those methods to remove leading and trailing spaces. Try the following code:

    ```csharp
    string greeting = "      Hello World!       ";
    Console.WriteLine($"[{greeting}]");

    string trimmedGreeting = greeting.TrimStart();
    Console.WriteLine($"[{trimmedGreeting}]");

    trimmedGreeting = greeting.TrimEnd();
    Console.WriteLine($"[{trimmedGreeting}]");

    trimmedGreeting = greeting.Trim();
    Console.WriteLine($"[{trimmedGreeting}]");
    ```

    The square brackets `[` and `]` help visualize what the `Trim`, `TrimStart` and `TrimEnd` methods do. The brackets show where whitespace starts and ends.

    This sample reinforces a couple of important concepts for working with strings. The methods that manipulate strings return new string objects rather than making modifications in place. You can see that each call to any of the `Trim` methods returns a new string but doesn't change the original message.

    There are other methods available to work with a string. For example, you've probably used a search and replace command in an editor or word processor before. The <xref:System.String.Replace%2A> method does something similar in a string. It searches for a substring and replaces it with different text. The <xref:System.String.Replace%2A> method takes two **parameters**. These are the strings between the parentheses. The first string is the text to search for. The second string is the text to replace it with. Try it for yourself. Add this code. Type it in to see the hints as you start typing `.Re` after the `sayHello` variable:

    ```csharp
    string sayHello = "Hello World!";
    Console.WriteLine(sayHello);
    sayHello = sayHello.Replace("Hello", "Greetings");
    Console.WriteLine(sayHello);
    ```

    Two other useful methods make a string ALL CAPS or all lower case. Try the following code. Type it in to see how **IntelliSense** provides hints as you start to type `To`:

    ```csharp
    Console.WriteLine(sayHello.ToUpper());
    Console.WriteLine(sayHello.ToLower());
    ```

- title: Search strings
  durationInMinutes: 10
  content: |
    The other part of a *search and replace* operation is to find text in a
    string. You can use the  <xref:System.String.Contains%2A> method for searching. It
    tells you if a string contains a substring inside it. Try the following
    code to explore <xref:System.String.Contains%2A>:

    ```csharp
    string songLyrics = "You say goodbye, and I say hello";
    Console.WriteLine(songLyrics.Contains("goodbye"));
    Console.WriteLine(songLyrics.Contains("greetings"));
    ```

    The <xref:System.String.Contains%2A> method returns a *boolean* value which tells you if the
    string you were searching for was found. A *boolean* stores either a `true` or a
    `false` value. When displayed as text output, they are capitalized: `True` and `False`, respectively. You'll learn more about *boolean* values
    in a later lesson.

    ***Challenge***

    There are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string. These find a substring at the beginning or the
    end of the string. Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and
    <xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>. Search for "You" or "goodbye" at the beginning of a string. Search for "hello" or "goodbye" at the end of a string.

    > [!NOTE]
    > Watch your punctuation when you test for the text at the end of the string. If the string
    > ends with a period, you must check for a string that ends with a period.

    You should get `true` for starting with "You" and ending with "hello" and false for starting with or ending with "goodbye".

- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this?

    ```csharp
    string songLyrics = "You say goodbye, and I say hello";
    Console.WriteLine(songLyrics.StartsWith("You"));
    Console.WriteLine(songLyrics.StartsWith("goodbye"));

    Console.WriteLine(songLyrics.EndsWith("hello"));
    Console.WriteLine(songLyrics.EndsWith("goodbye"));
    ```

- content: |
    You've completed the "Hello C#" introduction to C# tutorial. You can select the **Numbers in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding. The "Next steps" section brings you back to these tutorials.

    For further reading on the `string` type:
    - [C# Programming Guide](../../programming-guide/index.md) topic on [strings](../../programming-guide/strings/index.md).
    - [How to tips on working with strings](../../how-to/index.md#working-with-strings).
